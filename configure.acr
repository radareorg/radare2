PKGNAME radare2
VERSION 5.7.8
CONTACT pancake ; pancake@nopcode.org

LANG_C!

ARG_DISABLE DEBUGGER debugger disable native debugger features ;

(( -ldl -dynamic ... ))
USE_DL

USE_PKGCONFIG

CHKPRG! PATCH patch
CHKPRG! AR ar
CHKPRG GIT git
CHKPRG GPERF gperf
CHKLIB magic
ARG_WITH USE_MAGIC sysmagic force to use system's magic ;
IFAND HAVE_LIB_MAGIC USE_MAGIC {
	USE_LIB_MAGIC = 1 ;
	LIBMAGIC = -lmagic ;
}{
	USE_LIB_MAGIC = 0 ;
	LIBMAGIC = '' ;
}

ARG_DISABLE WANT_THREADS threads disable use of thread apis ;

(( useful for static builds . see sys/static.sh ))
ARG_DISABLE LOADLIBS loadlibs disable loading plugins ;

ARG_WITHOUT WANT_DYLINK dylink disable support for dynamic loading of plugins ;
ARG_WITHOUT HAVE_FORK fork disable fork ;
ARG_WITHOUT WANT_PTRACE_WRAP ptrace-wrap build ptrace-wrap support needed for the iaito debugger on Linux ;
ARG_WITHOUT WANT_GPERF gperf do not statically link the sdb databases even if gperf is found ;
ARG_WITHOUT WANT_CAPSTONE capstone dont build the capstone dependency ;

IFNOT WANT_GPERF {
	HAVE_GPERF = 0 ;
}

ARG_WITH WITH_LIBR libr build libr.a and libr.dylib ;

(( CAPSTONE ))
ARG_WITH USE_CS5 capstone5 build next branch of capstone5 (default) ;
ARG_WITH USE_CS4 capstone4 build v4 branch of capstone ;

ARG_WITH WITH_CAPSTONE syscapstone force to use system-wide capstone ;
IF WITH_CAPSTONE {
	PKGCFG CAPSTONE_CFLAGS CAPSTONE_LDFLAGS capstone
}
IFAND WITH_CAPSTONE HAVE_PKGCFG_CAPSTONE {
	USE_CAPSTONE = 1 ;
}{
	USE_CAPSTONE = 0 ;
}

(( LZ4 ))
PKGCFG LZ4_CFLAGS LZ4_LDFLAGS liblz4
ARG_WITH WITH_SYSLZ4 syslz4 force to use system's liblz4 ;
IFAND WITH_SYSLZ4 LZ4_CFLAGS {
	USE_SYSLZ4 = 1 ;
}{
	USE_SYSLZ4 = 0 ;

}

(( ZIP ))
CHKLIB z
CHKLIB zip
ARG_WITH USE_ZIP syszip force to use system's libzip and zlib ;
IFAND HAVE_LIB_Z USE_ZIP {
	IF HAVE_LIB_ZIP {
		USE_LIB_ZIP = 1 ;
		LIBZIP = -lz -lzip ;
	}{
		USE_LIB_ZIP = 0 ;
		LIBZIP = '' ; (( static linking to shlr/zip ))
	}
}{
	USE_LIB_ZIP = 0 ;
	LIBZIP = '' ; (( static linking to shlr/zip ))
}

CHKLIB xxhash
ARG_WITH USE_XXHASH sysxxhash force to use system's xxhash ;
IFAND HAVE_LIB_XXHASH USE_XXHASH {
	USE_LIB_XXHASH = 1 ;
	LIBXXHASH = -lxxhash ;
}{
	USE_LIB_XXHASH = 0 ;
	LIBXXHASH = '' ;
}

ARG_WITHOUT WITH_GPL gpl do not build GPL code (grub, cxx, ... ) ;

CHKDECL sys/personality.h ADDR_NO_RANDOMIZE
CHKDECL features.h __GLIBC__
CHKFNC c arc4random_uniform
CHKFNC c explicit_bzero
CHKFNC c explicit_memset
CHKFNC c clock_nanosleep
CHKFNC c sigaction
CHKFNC c clock_gettime

IFNOT HAVE_CLOCK_GETTIME {
	IF HAVE_DECL___GLIBC__ {
		CLOCK_LDFLAGS += '-lrt' ;
	}
}

CHKFLG SUPPORT_GNU99 -std=gnu99 ;

(( TODO must deprecate
CHKLIB gmp
ARG_WITHOUT HAVE_GMP gmp disable GMP dependency ;
IFNOT HAVE_GMP { HAVE_LIB_GMP = 0 ; }
HAVE_GMP = 0 ;
))
HAVE_LIB_GMP = 0 ;

CHKLIB ssl
PKGCFG SSL_CFLAGS SSL_LDFLAGS openssl
IFNOTNULL SSL_LDFLAGS {
	HAVE_OPENSSL = 1 ;
}
(( ARG_WITHOUT HAVE_OPENSSL ssl disable openssl dependency ; ))
ARG_WITH WANT_OPENSSL openssl build with openssl if possible ;
IFAND WANT_OPENSSL HAVE_OPENSSL {
	HAVE_OPENSSL = 1 ;
}{
	HAVE_OPENSSL = 0 ;
}
IFNULL SSL_LDFLAGS {
	IFNOT HAVE_LIB_SSL {
		HAVE_OPENSSL = 0 ;
	}{
		SSL_LDFLAGS = -lssl ;
	}
}

ARG_WITH WANT_LIBUV libuv disable libuv dependency ;
CHKVER libuv 1.0.0
IF HAVE_LIBUV_VERSION_1_0_0 {
	PKGCFG LIBUV_CFLAGS LIBUV_LDFLAGS libuv
	IFNOTNULL LIBUV_LDFLAGS {
		HAVE_LIBUV = 1 ;
	}{
		HAVE_LIBUV = 0 ;
	}
	IFNOT WANT_LIBUV {
		HAVE_LIBUV = 0 ;
	}
}{
	HAVE_LIBUV = 0 ;
}

ARG_WITH USE_RPATH rpath use rpath to build ;

(( rules for the compiler ))
ARG_WITH USERCC=gcc compiler Define compiler to use (see mk/) ;
ARG_WITH USEROSTYPE=auto ostype Choose OS ( android windows wsl mingw32 bsd solaris gnulinux darwin haiku ) ;

(( TODO: throw error if unknown ostype ))
(( TODO: handle BSD os as different ostype? ))
IFEQ USEROSTYPE auto ; {
	IFEQ HOST_OS mingw32_nt-6.2 ; {
		USEROSTYPE = mingw32 ;
	}{
	IFEQ HOST_OS mingw32_nt ; {
		USEROSTYPE = mingw32 ;
	}{
	IFEQ HOST_OS wsl ; {
		USEROSTYPE =  wsl ;
	}{
	IFEQ HOST_OS linux ; {
		USEROSTYPE = gnulinux ;
	}{
	IFEQ HOST_OS serenityos ; {
		USEROSTYPE = serenityos ;
		HAVE_LIB_DL = 1 ;
		DL_LIBS = -ldl ;
	}{
	IFEQ HOST_OS gnu ; {
		(( GNU / HURD ))
		USEROSTYPE = gnulinux ;
		HAVE_LIB_DL = 1 ;
		DL_LIBS = -ldl ;
	}{
	IFEQ HOST_OS sunos ; {
		USEROSTYPE = solaris ;
	}{
	IFEQ HOST_OS gnu/kfreebsd ; {
		USEROSTYPE = bsd ;
	}{
	IFEQ HOST_OS netbsd ; {
		USEROSTYPE = bsd ;
	}{
	IFEQ HOST_OS freebsd ; {
		USEROSTYPE = bsd ;
	}{
	IFEQ HOST_OS openbsd ; {
		USEROSTYPE = bsd ;
	}{
	IFEQ HOST_OS darwin ; {
		USEROSTYPE = darwin ;
        }{
	IFEQ HOST_OS haiku ; {
		USEROSTYPE = haiku ;
	} } } } } } } } } } } } }
}

(( this hack is required for openbsd ports ))
ARG_WITH LIBVERSION=xxx libversion specify different libversion ;
ARG_WITHOUT HAVE_JEMALLOC jemalloc build without jemalloc ;

IFEQ LIBVERSION xxx ; {
	LIBVERSION = $VERSION ;
}

IFEQ USEROSTYPE gnulinux ; {
	HAVE_PTRACE = 1 ;
	USE_PTRACE_WRAP = 1 ;
}{
IFEQ USEROSTYPE wsl ; {
	BUILD = ${SPLIT_CPU}-unknown-linux-gnu ;
	HOST = $BUILD ;
	TARGET = $HOST ;
	USEROSTYPE = gnulinux ;
	HAVE_PTRACE = 1 ;
	USE_PTRACE_WRAP = 0 ;
}{
IFEQ USEROSTYPE android ; {
	HAVE_PTRACE = 1 ;
	USE_PTRACE_WRAP = 1 ;
}{
IFEQ USEROSTYPE mingw32 ; {
	HAVE_PTRACE = 0 ;
	USE_PTRACE_WRAP = 0 ;
}{
IFEQ USEROSTYPE solaris ; {
	HAVE_PTRACE = 0 ;
	USE_PTRACE_WRAP = 0 ;
}{
IFEQ USEROSTYPE haiku ; {
	HAVE_PTRACE = 0 ;
	USE_PTRACE_WRAP = 0 ;
}{
	HAVE_PTRACE = 1 ;
	USE_PTRACE_WRAP = 0 ;
} } } } } }

IFNOT DEBUGGER {
	HAVE_PTRACE = 0 ;
}

IFEQ WANT_PTRACE_WRAP 0 ; {
	USE_PTRACE_WRAP = 0 ;
}

ARG_WITH R_CHECKS_LEVEL=2 checks-level value between 0 and 3 to enable different level of assert (see R_CHECKS_LEVEL) ;

REPORT
	BUILD CC CFLAGS DEBUGGER HAVE_ARC4RANDOM_UNIFORM HAVE_EXPLICIT_BZERO
	HAVE_EXPLICIT_MEMSET HAVE_FORK HAVE_GPERF HAVE_LIBUV HAVE_LIB_GMP
	HAVE_OPENSSL HAVE_PTRACE HOST LDFLAGS LIBVERSION PKGCONFIG PREFIX
	R_CHECKS_LEVEL TARGET USERCC USEROSTYPE USE_CAPSTONE USE_LIB_MAGIC
	USE_LIB_XXHASH USE_LIB_ZIP USE_PTRACE_WRAP USE_SYSLZ4 VERSION WANT_DYLINK
;

(( TODO: Add the rest of .pc files here.. add a rule for acr? ))
SUBDIRS ./config-user.mk
	libr/include/r_userconf.h
	pkgcfg/r_io.pc
	pkgcfg/r_magic.pc
	pkgcfg/r_asm.pc
	pkgcfg/r_bin.pc
	pkgcfg/r_anal.pc
	pkgcfg/r_cons.pc
	pkgcfg/r_core.pc
	pkgcfg/r_lang.pc
	pkgcfg/r_socket.pc
	pkgcfg/r_debug.pc
	pkgcfg/r_reg.pc
	pkgcfg/r_config.pc
	pkgcfg/r_flag.pc
	pkgcfg/r_syscall.pc
	pkgcfg/r_util.pc
	pkgcfg/r_search.pc
	pkgcfg/r_bp.pc
	pkgcfg/r_parse.pc
	pkgcfg/r_fs.pc
	pkgcfg/r_egg.pc
	pkgcfg/r_crypto.pc
;
