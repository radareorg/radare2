add64=add src to dst (64-bit)
add=add src to dst (32-bit)
and64=bitwise AND (64-bit)
and=bitwise AND (32-bit)
be16=big-endian integer swap (16-bit)
be32=big-endian integer swap (32-bit)
be64=big-endian integer swap (64-bit)
call=enter subroutine
div64=integer divide (64-bit)
div=integer divide (32-bit)
exit=exit subroutine
jeq=jump if equal
jge=jump if greater-or-equal than (unsigned)
jgt=jump if greater than (unsigned)
jle=jump if less-or-equal than (unsigned)
jlt=jump if less than (unsigned)
jmp=jump
jne=jump if not equal
jsge=jump if greater-or-equal than (signed)
jsgt=jump if greater than (signed)
jsle=jump if less-or-equal than (signed)
jslt=jump if less than (signed)
ldb=load byte
lddw=move 64-bit immediate to register
ldh=load half from address
ldw=load word from address
ldxb=load byte at address in register
ldxdw=load doubleword at address in register
ldxh=load half at address in register
ldxw=load word at address in register
le16=little-endian integer swap (16-bit)
le32=little-endian integer swap (32-bit)
le64=little-endian integer swap (64-bit)
lsh64=left shift (64-bit)
lsh=left shift (32-bit)
mod64=integer modulo (64-bit)
mod=integer modulo (32-bit)
mov64=move (64-bit)
mov=move (32-bit)
mul64=multiply dst by src (64-bit)
mul=multiply dst by src (32-bit)
neg64=integer negate (64-bit)
neg=integer negate (32-bit)
or64=bitwise OR (64-bit)
or=bitwise OR (32-bit)
rsh64=right shift (64-bit)
rsh=right shift (32-bit)
stb=store byte
stdw=store doubleword
sth=store half
stw=store word
stxb=store byte from register
stxdw=store doubleword from register
stxh=store half from register
stxw=store word from register
sub64=subtract src from dst (64-bit)
sub=subtract src from dst (32-bit)
xor64=bitwise XOR (64-bit)
xor=bitwise XOR (32-bit)
