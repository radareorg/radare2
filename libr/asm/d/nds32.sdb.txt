movi55=Move immediate value to register
lwi333=Load word from memory with base register and offset
swi333=Store word to memory with base register and offset
push25=Push register onto stack
pop25=Pop register from stack
beqzs8=Branch if register is zero
j8=Jump to label
bitci=Bit clear immediate
ori=OR immediate
addi45=Add immediate
subri45=Subtract immediate reverse
andi45=AND immediate
ori45=OR immediate
xori45=XOR immediate
slti45=Set if less than immediate
sltsi45=Set if less than immediate signed
beqz38=Branch if register is zero
bnez38=Branch if register is not zero
jr5=Jump to register
jal=Jump and link
ret=Return
syscall=System call
break=Breakpoint
nop=No operation
sbi.gp=Store byte to GP-relative address
lbi=Load byte from immediate address
sbi333=Store byte with base register and offset
mov55=Move register to register
lmw.bi=Load multiple words before increment
addri36.sp=Add immediate to stack pointer
shi.bi=Store halfword before increment
jral5=Jump and link register
lwi.gp=Load word from GP-relative address
ret5=Return to register
bnec=Branch if not equal
addi=Add immediate
addi.gp=Add to GP register
beq=Branch if equal
mfsr=Move from special register
movi=Move immediate
swi=Store word to immediate address
swi450=Store word with base register and offset
srai45=Arithmetic shift right immediate
beqc=Branch if equal to constant
addi10s=Add immediate short
movpi45=Move position-independent immediate
or_slli=OR with shift left immediate
maddr32=Multiply-add
sethi=Set high immediate
divr=Divide
or33=OR operation
srli45=Logical shift right immediate
lwi=Load word from immediate address
zeh33=Zero extend halfword
movd44=Move double register
xlsb33=Extract least significant bit
andi=AND immediate
jr=Jump to register
subri=Subtract immediate reverse
lwsi.bi=Load word signed before increment
slti45=Set if less than immediate
smw.bi=Store multiple words before increment
bnezs8=Branch if not zero
slli=Shift left logical immediate
lbi333=Load byte with base register and offset
swi45=Store word with base register and offset
swi.gp=Store word to GP-relative address
sbi=Store byte to immediate address
shi.gp=Store halfword to GP-relative address