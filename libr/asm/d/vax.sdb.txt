addf2=add floating (2-operand)
addf3=add floating (3-operand)
addl2=add longword (2-operand)
addl3=add longword (3-operand)
addl=add longword
addw2=add word (2-operand)
addw3=add word (3-operand)
addr=add address
adc=add with carry
and=bitwise AND
andb=bitwise AND (byte)
andl=bitwise AND (long)
ashl=arithmetic shift left
ashr=arithmetic shift right
asl=arithmetic shift left
asr=arithmetic shift right
bacom=byte align/compress (arch specific)
bcc=branch on carry clear
bcs=branch on carry set
beql=branch if equal (zero)
bneq=branch if not equal
bne=branch if not equal
br=branch always
brb=branch byte displacement
brw=branch word displacement
brz=branch if zero
bvc=branch if overflow clear
bvs=branch if overflow set
callg=call general
call=call (alias)
calls=calls (call with arg count)
cbits=change bits (bit-field ops)
ccflg=conditional clear flag
clrb=clear byte
clrl=clear long
clr=clear
cmpl=compare long
cmpb=compare byte
cmpw=compare word
cmp=compare
cvtl=convert to long
cvtb=convert to byte
cvtw=convert to word
cvtd=convert to double
dec=decrement
decl=decrement long
divl=divide long
divw=divide word
divf=divide floating
ent=enter (stack frame)
halt=halt processor
inc=increment
incl=increment long
jmp=jump
jsr=jump to subroutine
jsb=jump to subroutine and branch
lea=load effective address
mov=move
movb=move byte
movw=move word
movl=move longword
movq=move quadword
movzbl=move zero-extended byte to long
movzwl=move zero-extended word to long
movab=move address of symbol to register
moval=move address (alias)
movc3=move bytes (3-arg)
movc5=move bytes (5-arg)
mcoml=move complemented long? (VAX specific mcoml)
mul= multiply
mulw= multiply word
mulh= multiply high
mulf= multiply floating
neg=negate
negx=negate with extend
nop=no operation
pop=pop from stack
push=push to stack
pushl=push longword
pushab=push address of label
pushal=push address long? (arch specific)
ret=return from subroutine
reb=readback (arch specific)
rem= remainder
ren=rename/return (context specific)
rol=rotate left
ror=rotate right
rti=return from interrupt
rts=return from subroutine
sbbl=subtract with borrow long
subl2=subtract long (2-operand)
subl3=subtract long (3-operand)
sbw=subtract word
shl=shift left
shr=shift right
shll=shift left logical
sdiv= signed divide
stb=store byte
stw=store word
stl=store long
stq=store quad
stor=store (alias)
sub= subtract
subf= subtract floating
swab=swap bytes in word
swap=swap registers/words
sync=synchronize
syscall=system call
tstb=test byte
tstw=test word
tstl=test long
tst=test
trap=software trap
trapv=trap on overflow
unlk=unlink frame
xor=bitwise exclusive OR
xorb=xor byte
xorl=xor long
invalid=invalid instruction

