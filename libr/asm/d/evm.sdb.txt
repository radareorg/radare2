stop=halt execution
add=(u)int256 addition modulo 2**256
mul=(u)int256 multiplication modulo 2**256
sub=(u)int256 addition modulo 2**256
div=uint256 division
sdiv=int256 division
mod=uint256 modulus
smod=int256 modulus
addmod=(u)int256 addition modulo n
mulmod=(u)int256 multiplication modulo n
exp=uint256 exponentiation modulo 2**256
signextend=sign extend x from (b+1) bytes to 32 bytes
lt=uint256 less-than
gt=uint256 greater-than
slt=int256 less-than
sgt=int256 greater-than
eq=(u)int256 equality
iszero=(u)int256 iszero
and=bitwise and
or=bitwise or
xor=bitwise xor
not=bitwise not
byte=retrieve single byte from word
shl=shift left
shr=logical shift right
sar=arithmetic shift right
sha3=compute keccak-256 hash
address=address of executing contract
balance=balance, in wei
origin=address that originated the tx
caller=address of msg sender
callvalue=msg value, in wei
calldataload=read word from msg data at index idx
calldatasize=length of msg data, in bytes
calldatacopy=copy msg data
codesize=length of executing contract's code, in bytes
codecopy=copy executing contract's bytecode
gasprice=gas price of tx, in wei per unit gas
extcodesize=size of code at addr, in bytes
extcodecopy=copy code from addr
returndatasize=size of returned data from last external call, in bytes
returndatacopy=copy returned data from last external call
extcodehash=get hash of an accountâ€™s code
blockhash=get the hash of one of the 256 most recent complete blocks
coinbase=address of miner of current block
timestamp=timestamp of current block
number=number of current block
difficulty=difficulty of current block
gaslimit=gas limit of current block
chainid=push current chain id onto stack
selfbalance=balance of executing contract, in wei
basefee=base fee of current block
blobhash=value of the base fee
blobbasefee= value of blob base-fee
pop=remove item from top of stack and discard it
mload=read word from memory at offset ost
mstore=write a word to memory
mstore8=write a single byte to memory
sload=read word from storage
sstore=write word to storage
jump=perform unconditional jump
jumpi=perform conditional jump
pc=program counter
msize=size of memory in current execution context, in bytes
gas=get the amount of available gas
jumpdest=mark valid jump destination
tload=load word from transient storage
tstore=save word to transient storage
mcopy=copy memory areas
push0=push constant value 0 onto stack
push1=push 1-byte value onto stack
push2=push 2-byte value onto stack
push3=push 3-byte value onto stack
push4=push 4-byte value onto stack
push5=push 5-byte value onto stack
push6=push 6-byte value onto stack
push7=push 7-byte value onto stack
push8=push 8-byte value onto stack
push9=push 9-byte value onto stack
push10=push 10-byte value onto stack
push11=push 11-byte value onto stack
push12=push 12-byte value onto stack
push13=push 13-byte value onto stack
push14=push 14-byte value onto stack
push15=push 15-byte value onto stack
push16=push 16-byte value onto stack
push17=push 17-byte value onto stack
push18=push 18-byte value onto stack
push19=push 19-byte value onto stack
push20=push 20-byte value onto stack
push21=push 21-byte value onto stack
push22=push 22-byte value onto stack
push23=push 23-byte value onto stack
push24=push 24-byte value onto stack
push25=push 25-byte value onto stack
push26=push 26-byte value onto stack
push27=push 27-byte value onto stack
push28=push 28-byte value onto stack
push29=push 29-byte value onto stack
push30=push 30-byte value onto stack
push31=push 31-byte value onto stack
push32=push 32-byte value onto stack
dup1=clone 1st value on stack
dup2=clone 2nd value on stack
dup3=clone 3rd value on stack
dup4=clone 4th value on stack
dup5=clone 5th value on stack
dup6=clone 6th value on stack
dup7=clone 7th value on stack
dup8=clone 8th value on stack
dup9=clone 9th value on stack
dup10=clone 10th value on stack
dup11=clone 11th value on stack
dup12=clone 12th value on stack
dup13=clone 13th value on stack
dup14=clone 14th value on stack
dup15=clone 15th value on stack
dup16=clone 16th value on stack
swap1=swap 1st and 2nd values on stack
swap2=swap 1st and 3rd values on stack
swap3=swap 1st and 4th values on stack
swap4=swap 1st and 5th values on stack
swap5=swap 1st and 6th values on stack
swap6=swap 1st and 7th values on stack
swap7=swap 1st and 8th values on stack
swap8=swap 1st and 9th values on stack
swap9=swap 1st and 10th values on stack
swap10=swap 1st and 11th values on stack
swap11=swap 1st and 12th values on stack
swap12=swap 1st and 13th values on stack
swap13=swap 1st and 14th values on stack
swap14=swap 1st and 15th values on stack
swap15=swap 1st and 16th values on stack
swap16=swap 1st and 17th values on stack
log0=append log record with no topics
log1=append log record with 1 topic
log2=append log record with 2 topics
log3=append log record with 3 topics
log4=append log record with 4 topics
create=create a new account with associated code
call=takes 7 values from stack and make a call, push in stack result and stores in memory retuned call data
callcode=takes 7 values from stack and makes a call to a reciever within self scope without sender values, push in stack result and stores in memory retuned call data
return=halt execution returning output data
delegatecall=takes 7 values from stack and makes a call to a reciever within self scope, push in stack result and stores in memory retuned call data
create2=create a new account with associated code at a predictable address
staticcall=static message-call into an account
revert=halt execution reverting state changes but returning data and remaining gas
invalid=designated invalid opcode
selfdestruct=halt execution and register account for later deletion
