// r2papi main file
Object.defineProperty(G, "__esModule", { value: true });
G.NativePointer = G.NativeCallback = G.NativeFunction = G.R2Papi = G.Assembler = G.ProcessClass = G.ModuleClass = G.ThreadClass = void 0;
// import { R, Module, Process, Thread } from "./global.js"
const shell_js_1 = G;//"./shell.js");
;
;
;
;
;
;
;
;
class ThreadClass {
    constructor(r2) {
        this.api = null;
        this.api = r2;
    }
    backtrace() {
        return r2pipe_js_1.r2.call("dbtj");
    }
    sleep(seconds) {
        return r2pipe_js_1.r2.call("sleep " + seconds);
    }
}
G.ThreadClass = ThreadClass;
class ModuleClass {
    constructor(r2) {
        this.api = null;
        this.api = r2;
    }
    fileName() {
        return this.api.call("dpe").trim();
    }
    name() {
        return "Module";
    }
    findBaseAddress() {
        return "TODO";
    }
    findExportByName(name) {
        // TODO
        return "TODO";
    }
    getBaseAddress(name) {
        return "TODO";
    }
    getExportByName(name) {
        return r2pipe_js_1.r2.call("iE,name/eq/" + name + ",vaddr/cols,:quiet");
    }
    enumerateExports() {
        // TODO: use frida json
        return r2pipe_js_1.r2.callj("iEj");
    }
    enumerateImports() {
        // TODO: use frida json
        return r2pipe_js_1.r2.callj("iij");
    }
    enumerateRanges() {
        // TODO: use frida json
        return r2pipe_js_1.r2.callj("isj");
    }
    enumerateSymbols() {
        // TODO: use frida json
        return r2pipe_js_1.r2.callj("isj");
    }
}
G.ModuleClass = ModuleClass;
class ProcessClass {
    constructor(r2) {
        this.r2 = null;
        this.r2 = r2;
    }
    enumerateMallocRanges() {
    }
    enumerateSystemRanges() {
    }
    enumerateRanges() {
    }
    enumerateThreads() {
        return r2pipe_js_1.r2.call("dptj");
    }
    enumerateModules() {
        r2pipe_js_1.r2.call("cfg.json.num=string"); // to handle 64bit values properly
        if (r2pipe_js_1.r2.callj("e cfg.debug")) {
            const modules = r2pipe_js_1.r2.callj("dmmj");
            const res = [];
            for (const mod of modules) {
                const entry = {
                    base: new NativePointer(mod.addr),
                    size: new NativePointer(mod.addr_end).sub(mod.addr),
                    path: mod.file,
                    name: mod.name,
                };
                res.push(entry);
            }
            return res;
        }
        else {
            const fname = (x) => {
                const y = x.split("/");
                return y[y.length - 1];
            };
            const bobjs = r2pipe_js_1.r2.callj("obj");
            const res = [];
            for (const obj of bobjs) {
                const entry = {
                    base: new NativePointer(obj.addr),
                    size: obj.size,
                    path: obj.file,
                    name: fname(obj.file)
                };
                res.push(entry);
            }
            const libs = r2pipe_js_1.r2.callj("ilj");
            for (const lib of libs) {
                const entry = {
                    base: 0,
                    size: 0,
                    path: lib,
                    name: fname(lib)
                };
                res.push(entry);
            }
            return res;
        }
    }
    getModuleByAddress(addr) {
    }
    getModuleByName(moduleName) {
    }
    codeSigningPolicy() {
        return "optional";
    }
    getTmpDir() {
        return this.r2.call("e dir.tmp").trim();
    }
    getHomeDir() {
        return this.r2.call("e dir.home").trim();
    }
    platform() {
        return this.r2.call("e asm.os").trim();
    }
    getCurrentDir() {
        return this.r2.call("pwd").trim();
    }
    getCurrentThreadId() {
        return +this.r2.call("dpq");
    }
    pageSize() {
        if (this.r2.callj("e asm.bits") === 64 && this.r2.call("e asm.arch").startsWith("arm")) {
            return 16384;
        }
        return 4096;
    }
    isDebuggerAttached() {
        return this.r2.callj("e cfg.debug");
    }
    setExceptionHandler() {
        // do nothing
    }
    id() {
        // 
        return this.r2.callj("dpq");
    }
    pointerSize() {
        return r2pipe_js_1.r2.callj("e asm.bits") / 8;
    }
}
G.ProcessClass = ProcessClass;
class Assembler {
    constructor(myr2) {
        this.program = "";
        this.labels = {};
        this.endian = false;
        this.pc = 0;
        this.r2 = null;
        this.r2 = (typeof myr2 === 'undefined') ? r2pipe_js_1.r2 : myr2;
        this.program = '';
        this.labels = {};
    }
    setProgramCounter(pc) {
        this.pc = pc;
    }
    setEndian(big) {
        this.endian = big;
    }
    toString() {
        return this.program;
    }
    append(x) {
        this.pc += x.length / 2;
        this.program += x;
    }
    // api
    label(s) {
        const pos = this.pc; // this.#program.length / 4;
        this.labels[s] = this.pc;
        return pos;
    }
    asm(s) {
        let hex = this.r2.cmd('""pa ' + s).trim();
        if (hex.length < 16) {
            // ok
        }
        else {
            hex = "____";
            // console.error("Invalid instruction: " + s);
        }
        this.append(hex);
    }
}
G.Assembler = Assembler;
class R2Papi {
    constructor(r2) {
        this.r2 = r2;
    }
    toString() {
        return "[object R2Papi]";
    }
    toJSON() {
        return this.toString();
    }
    getBaseAddress() {
        return new NativePointer(this.cmd("e bin.baddr"));
    }
    jsonToTypescript(name, a) {
        let str = `interface ${name} {\n`;
        if (a.length && a.length > 0) {
            a = a[0];
        }
        for (let k of Object.keys(a)) {
            const typ = typeof (a[k]);
            const nam = k;
            str += `    ${nam}: ${typ};\n`;
        }
        return `${str}}\n`;
    }
    getBits() {
        return this.cmd('-b');
    }
    getArch() {
        return this.cmd('-a');
    }
    getCpu() {
        return this.cmd('-e asm.cpu');
    }
    // TODO: setEndian, setCpu, ...
    setArch(arch, bits) {
        this.cmd("-a " + arch);
        if (bits !== undefined) {
            this.cmd("-b " + bits);
        }
    }
    setFlagSpace(name) {
        this.cmd('fs ' + name);
    }
    setLogLevel(level) {
        this.cmd('e log.level=' + level);
        return this;
    }
    /**
     * should return the id for the new map using the given file descriptor
     */
    // rename to createMap or mapFile?
    newMap(fd, vaddr, size, paddr, perm, name = "") {
        this.cmd(`om ${fd} ${vaddr} ${size} ${paddr} ${perm} ${name}`);
    }
    at(a) {
        return new NativePointer(a);
    }
    getShell() {
        return new shell_js_1.R2PapiShell(this);
    }
    // Radare/Frida
    version() {
        return this.r2.cmd("?Vq").trim();
    }
    // Process
    platform() {
        return this.r2.cmd("uname").trim();
    }
    arch() {
        return this.r2.cmd("uname -a").trim();
    }
    bits() {
        return this.r2.cmd("uname -b").trim();
    }
    id() {
        // getpid();
        return +this.r2.cmd("?vi:$p");
    }
    // Other stuff
    printAt(msg, x, y) {
        // see pg, but pg is obrken :D
    }
    clearScreen() {
        this.r2.cmd("!clear");
        return this;
    }
    getConfig(key) {
        if (key === '') {
            return new Error('Empty key');
        }
        const exist = this.r2.cmd(`e~^${key} =`).trim();
        if (exist === '') {
            return new Error('Config key does not exist');
        }
        return this.r2.call("e " + key).trim();
    }
    setConfig(key, val) {
        this.r2.call("e " + key + "=" + val);
        return this;
    }
    getRegisterStateForEsil() {
        return this.cmdj("dre").trim();
    }
    getRegisters() {
        // this.r2.log("winrar" + JSON.stringify(JSON.parse(this.r2.cmd("drj")),null, 2) );
        return this.cmdj("drj");
    }
    resizeFile(newSize) {
        this.cmd(`r ${newSize}`);
        return this;
    }
    insertNullBytes(newSize, at) {
        if (at === undefined) {
            at = "$$";
        }
        this.cmd(`r+${newSize}@${at}`);
        return this;
    }
    removeBytes(newSize, at) {
        if (at === undefined) {
            at = "$$";
        }
        this.cmd(`r-${newSize}@${at}`);
        return this;
    }
    seek(addr) {
        this.cmd(`s ${addr}`);
        return this;
    }
    currentSeek() {
        return new NativePointer('$$');
    }
    seekToRelativeOpcode(nth) {
        this.cmd(`so ${nth}`);
        return this.currentSeek();
    }
    getBlockSize() {
        return +this.cmd("b");
    }
    setBlockSize(a) {
        this.cmd(`b ${a}`);
        return this;
    }
    countFlags() {
        return Number(this.cmd("f~?"));
    }
    countFunctions() {
        return Number(this.cmd("aflc"));
    }
    analyzeFunctionsWithEsil(depth) {
        this.cmd("aaef");
    }
    analyzeProgramWithEsil(depth) {
        this.cmd("aae");
    }
    analyzeProgram(depth) {
        if (depth === undefined) {
            depth = 0;
        }
        switch (depth) {
            case 0:
                this.cmd("aa");
                break;
            case 1:
                this.cmd("aaa");
                break;
            case 2:
                this.cmd("aaaa");
                break;
            case 3:
                this.cmd("aaaaa");
                break;
        }
        return this;
    }
    enumerateThreads() {
        // TODO: use apt/dpt to list threads at iterate over them to get the registers
        const regs0 = this.cmdj("drj");
        const thread0 = {
            context: regs0,
            id: 0,
            state: "waiting",
            selected: true,
        };
        return [thread0];
    }
    currentThreadId() {
        if (+this.cmd("e cfg.debug")) {
            return +this.cmd("dpt.");
        }
        return this.id();
    }
    setRegisters(obj) {
        for (let r of Object.keys(obj)) {
            const v = obj[r];
            this.r2.cmd("dr " + r + "=" + v);
        }
    }
    hex(s) {
        return this.r2.cmd("?v " + s).trim();
    }
    step() {
        this.r2.cmd("ds");
        return this;
    }
    stepOver() {
        this.r2.cmd("dso");
        return this;
    }
    math(expr) {
        return +this.r2.cmd("?v " + expr);
    }
    stepUntil(dst) {
        this.cmd(`dsu ${dst}`);
    }
    enumerateXrefsTo(s) {
        return this.call("axtq " + s).trim().split(/\n/);
    }
    // TODO: rename to searchXrefsTo ?
    findXrefsTo(s, use_esil) {
        if (use_esil) {
            this.call("/r " + s);
        }
        else {
            this.call("/re " + s);
        }
    }
    analyzeFunctionsFromCalls() {
        this.call("aac");
        return this;
    }
    analyzeFunctionsWithPreludes() {
        this.call("aap");
        return this;
    }
    analyzeObjCReferences() {
        this.cmd("aao");
        return this;
    }
    analyzeImports() {
        this.cmd("af @ sym.imp.*");
        return this;
    }
    searchDisasm(s) {
        const res = this.callj("/ad " + s);
        return res;
    }
    searchString(s) {
        const res = this.cmdj("/j " + s);
        return res;
    }
    searchBytes(data) {
        function num2hex(data) {
            return (data & 0xff).toString(16);
        }
        const s = data.map(num2hex).join('');
        const res = this.cmdj("/xj " + s);
        return res;
    }
    binInfo() {
        try {
            return this.cmdj("ij~{bin}");
        }
        catch (e) {
            return {};
        }
    }
    // TODO: take a BinFile as argument instead of number
    selectBinary(id) {
        this.call(`ob ${id}`);
    }
    openFile(name) {
        const ofd = this.call('oqq').trim();
        this.call(`o ${name}`);
        const nfd = this.call('oqq').trim();
        if (ofd === nfd) {
            return new Error('Cannot open file');
        }
        return parseInt(nfd);
    }
    openFileNomap(name) {
        const ofd = this.call('oqq').trim();
        this.call(`of ${name}`);
        const nfd = this.call('oqq').trim();
        if (ofd === nfd) {
            return new Error('Cannot open file');
        }
        return parseInt(nfd);
    }
    currentFile(name) {
        return this.call('o.').trim();
    }
    enumeratePlugins(type) {
        switch (type) {
            case "bin":
                return this.callj("Lij");
            case "io":
                return this.callj("Loj");
            case "core":
                return this.callj("Lcj");
            case "arch":
                return this.callj("LAj");
            case "anal":
                return this.callj("Laj");
            case "lang":
                return this.callj("Llj");
        }
        return [];
    }
    enumerateModules() {
        return this.callj("dmmj");
    }
    enumerateFiles() {
        return this.callj("oj");
    }
    enumerateBinaries() {
        return this.callj("obj");
    }
    enumerateMaps() {
        return this.callj("omj");
    }
    enumerateClasses() {
        return this.callj("icj");
    }
    enumerateSymbols() {
        return this.callj("isj");
    }
    enumerateExports() {
        return this.callj("iEj");
    }
    enumerateImports() {
        return this.callj("iij");
    }
    enumerateLibraries() {
        return this.callj("ilj");
    }
    enumerateSections() {
        return this.callj("iSj");
    }
    enumerateSegments() {
        return this.callj("iSSj");
    }
    enumerateEntrypoints() {
        return this.callj("iej");
    }
    enumerateRelocations() {
        return this.callj("irj");
    }
    enumerateFunctions() {
        return this.cmdj("aflj");
    }
    enumerateFlags() {
        return this.cmdj("fj");
    }
    skip() {
        this.r2.cmd("dss");
    }
    ptr(s) {
        return new NativePointer(s, this);
    }
    call(s) {
        return this.r2.call(s);
    }
    callj(s) {
        return JSON.parse(this.call(s));
    }
    cmd(s) {
        return this.r2.cmd(s);
    }
    cmdj(s) {
        return JSON.parse(this.cmd(s));
    }
    log(s) {
        return this.r2.log(s);
    }
    clippy(msg) {
        this.r2.log(this.r2.cmd("?E " + msg));
    }
    ascii(msg) {
        this.r2.log(this.r2.cmd("?ea " + msg));
    }
}
G.R2Papi = R2Papi;
// useful to call functions via dxc
class NativeFunction {
    constructor() {
    }
}
G.NativeFunction = NativeFunction;
// uhm not sure how to map this into r2 yet
class NativeCallback {
    constructor() {
    }
}
G.NativeCallback = NativeCallback;
// export const NULL = ptr("0");yet
class NativePointer {
    constructor(s, api) {
        if (api === undefined) {
            this.api = G.R;
        }
        else {
            this.api = api;
        }
        // this.api.r2.log("NP " + s);
        this.addr = ("" + s).trim();
    }
    setFlag(name) {
        this.api.call(`f ${name}=${this.addr}`);
    }
    unsetFlag() {
        this.api.call(`f-${this.addr}`);
    }
    hexdump(length) {
        let len = (length === undefined) ? "" : "" + length;
        return this.api.cmd(`x${len}@${this.addr}`);
    }
    functionGraph(format) {
        if (format === "dot") {
            return this.api.cmd(`agfd@ ${this.addr}`);
        }
        if (format === "json") {
            return this.api.cmd(`agfj@${this.addr}`);
        }
        if (format === "mermaid") {
            return this.api.cmd(`agfm@${this.addr}`);
        }
        return this.api.cmd(`agf@${this.addr}`);
    }
    readByteArray(len) {
        return JSON.parse(this.api.cmd(`p8j ${len}@${this.addr}`));
    }
    readHexString(len) {
        return this.api.cmd(`p8 ${len}@${this.addr}`).trim();
    }
    and(a) {
        const addr = this.api.call(`?v ${this.addr} & ${a}`).trim();
        return new NativePointer(addr);
    }
    or(a) {
        const addr = this.api.call(`?v ${this.addr} | ${a}`).trim();
        return new NativePointer(addr);
    }
    add(a) {
        const addr = this.api.call(`?v ${this.addr}+${a}`).trim();
        return new NativePointer(addr);
    }
    sub(a) {
        const addr = this.api.call(`?v ${this.addr}-${a}`).trim();
        return new NativePointer(addr);
    }
    writeByteArray(data) {
        this.api.cmd("wx " + data.join(""));
        return this;
    }
    writeAssembly(instruction) {
        this.api.cmd(`wa ${instruction} @ ${this.addr}`);
        return this;
    }
    writeCString(s) {
        this.api.call("w " + s);
        return this;
    }
    writeWideString(s) {
        this.api.call("ww " + s);
        return this;
    }
    /**
         * Check if it's a pointer to the address zero. Also known as null pointer.
         *
         * @returns {boolean} true if null
         */
    isNull() {
        return this.toNumber() == 0;
    }
    compare(a) {
        if (typeof a === "string" || typeof a === "number") {
            a = new NativePointer(a);
        }
        return a.addr === this.addr || (new NativePointer(a.addr)).toNumber() === this.toNumber();
    }
    pointsToNull() {
        return this.readPointer().compare(0);
    }
    toJSON() {
        return this.api.cmd('?vi ' + this.addr.trim()).trim();
    }
    toString() {
        return this.api.cmd('?v ' + this.addr.trim()).trim();
    }
    toNumber() {
        return parseInt(this.toString());
    }
    writePointer(p) {
        this.api.cmd(`wvp ${p}@${this}`); // requires 5.8.2
    }
    readRelativePointer() {
        return this.add(this.readS32());
    }
    readPointer() {
        return new NativePointer(this.api.call("pvp@" + this.addr));
    }
    readS8() {
        return parseInt(this.api.cmd(`pv1d@${this.addr}`));
    }
    readU8() {
        return parseInt(this.api.cmd(`pv1u@${this.addr}`));
    }
    readU16() {
        return parseInt(this.api.cmd(`pv2d@${this.addr}`));
    }
    readU16le() {
        return parseInt(this.api.cmd(`pv2d@${this.addr}@e:cfg.bigendian=false`)); // requires 5.8.9
    }
    readU16be() {
        return parseInt(this.api.cmd(`pv2d@${this.addr}@e:cfg.bigendian=true`)); // requires 5.8.9
    }
    readS16() {
        return parseInt(this.api.cmd(`pv2d@${this.addr}`)); // requires 5.8.9
    }
    readS16le() {
        return parseInt(this.api.cmd(`pv2d@${this.addr}@e:cfg.bigendian=false`)); // requires 5.8.9
    }
    readS16be() {
        return parseInt(this.api.cmd(`pv2d@${this.addr}@e:cfg.bigendian=true`)); // requires 5.8.9
    }
    readS32() {
        return parseInt(this.api.cmd(`pv4d@${this.addr}`)); // requires 5.8.9
    }
    readU32() {
        return parseInt(this.api.cmd(`pv4u@${this.addr}`)); // requires 5.8.9
    }
    readU32le() {
        return parseInt(this.api.cmd(`pv4u@${this.addr}@e:cfg.bigendian=false`)); // requires 5.8.9
    }
    readU32be() {
        return parseInt(this.api.cmd(`pv4u@${this.addr}@e:cfg.bigendian=true`)); // requires 5.8.9
    }
    readU64() {
        // XXX: use bignum or string here
        return parseInt(this.api.cmd(`pv8u@${this.addr}`));
    }
    readU64le() {
        return parseInt(this.api.cmd(`pv8u@${this.addr}@e:cfg.bigendian=false`)); // requires 5.8.9
    }
    readU64be() {
        return parseInt(this.api.cmd(`pv8u@${this.addr}@e:cfg.bigendian=true`)); // requires 5.8.9
    }
    writeInt(n) {
        return this.writeU32(n);
    }
    writeU8(n) {
        this.api.cmd(`wv1 ${n}@${this.addr}`);
        return true;
    }
    writeU16(n) {
        this.api.cmd(`wv2 ${n}@${this.addr}`);
        return true;
    }
    writeU16be(n) {
        this.api.cmd(`wv2 ${n}@${this.addr}@e:cfg.bigendian=true`);
        return true;
    }
    writeU16le(n) {
        this.api.cmd(`wv2 ${n}@${this.addr}@e:cfg.bigendian=false`);
        return true;
    }
    writeU32(n) {
        this.api.cmd(`wv4 ${n}@${this.addr}`);
        return true;
    }
    writeU32be(n) {
        this.api.cmd(`wv4 ${n}@${this.addr}@e:cfg.bigendian=true`);
        return true;
    }
    writeU32le(n) {
        this.api.cmd(`wv4 ${n}@${this.addr}@e:cfg.bigendian=false`);
        return true;
    }
    writeU64(n) {
        this.api.cmd(`wv8 ${n}@${this.addr}`);
        return true;
    }
    writeU64be(n) {
        this.api.cmd(`wv8 ${n}@${this.addr}@e:cfg.bigendian=true`);
        return true;
    }
    writeU64le(n) {
        this.api.cmd(`wv8 ${n}@${this.addr}@e:cfg.bigendian=false`);
        return true;
    }
    readInt32() {
        return this.readU32();
    }
    readCString() {
        return JSON.parse(this.api.cmd(`pszj@${this.addr}`)).string;
    }
    readWideString() {
        return JSON.parse(this.api.cmd(`pswj@${this.addr}`)).string;
    }
    readPascalString() {
        return JSON.parse(this.api.cmd(`pspj@${this.addr}`)).string;
    }
    instruction() {
        const op = this.api.cmdj(`aoj@${this.addr}`)[0];
        return op;
    }
    disassemble(length) {
        let len = (length === undefined) ? "" : "" + length;
        return this.api.cmd(`pd ${len}@${this.addr}`);
    }
    analyzeFunction() {
        this.api.cmd("af@" + this.addr);
        return this;
    }
    analyzeFunctionRecursively() {
        this.api.cmd("afr@" + this.addr);
        return this;
    }
    name() {
        return this.api.cmd("fd " + this.addr).trim();
    }
    methodName() {
        // TODO: @ should be optional here, as addr should be passable as argument imho
        return this.api.cmd("ic.@" + this.addr).trim();
    }
    symbolName() {
        // TODO: @ should be optional here, as addr should be passable as argument imho
        return this.api.cmd("isj.@" + this.addr).trim();
    }
    getFunction() {
        return this.api.cmdj("afij@" + this.addr);
    }
    basicBlock() {
        const bb = this.api.cmdj("abj@" + this.addr);
        return bb;
    }
    functionBasicBlocks() {
        return this.api.cmdj("afbj@" + this.addr);
    }
    xrefs() {
        return this.api.cmdj("axtj@" + this.addr);
    }
}
G.NativePointer = NativePointer;
Object.defineProperty(G, "__esModule", { value: true });
Object.defineProperty(G, "__esModule", { value: true });
G.Base64 = void 0;
class Base64 {
    static encode(x) {
        return (0, G.b64)(x);
    }
    static decode(x) {
        return (0, G.b64)(x, true);
    }
}
G.Base64 = Base64;
Object.defineProperty(G, "__esModule", { value: true });
G.R2AI = void 0;
class R2AI {
    constructor(num, model) {
        this.available = false;
        this.model = "";
        this.available = r2pipe_js_1.r2.cmd('r2ai -h').trim() !== "";
        if (this.available) {
            if (num) {
                r2pipe_js_1.r2.call(`r2ai -n ${num}`);
            }
            // r2.call('r2ai -e DEBUG=1')
            if (model) {
                this.model = model;
            }
        }
        else {
            throw new Error("ERROR: r2ai is not installed");
        }
    }
    reset() {
        if (this.available) {
            r2pipe_js_1.r2.call('r2ai -R');
        }
    }
    setRole(msg) {
        if (this.available) {
            r2pipe_js_1.r2.call(`r2ai -r ${msg}`);
        }
    }
    setModel(modelName) {
        if (this.available) {
            r2pipe_js_1.r2.call(`r2ai -m ${this.model}`);
        }
    }
    getModel() {
        if (this.available) {
            return r2pipe_js_1.r2.call("r2ai -m");
        }
        return this.model;
    }
    listModels() {
        if (this.available) {
            return r2pipe_js_1.r2.call("r2ai -M").trim().split(/\n/g);
        }
        return [];
    }
    query(msg) {
        if (!this.available || msg == '') {
            return '';
        }
        const fmsg = msg.trim().replace(/\n/g, '.');
        return r2pipe_js_1.r2.call(`r2ai ${fmsg}`);
    }
}
G.R2AI = R2AI;
// shell utilities on top of r2pipe
Object.defineProperty(G, "__esModule", { value: true });
G.R2PapiShell = void 0;
class R2PapiShell {
    constructor(papi) {
        this.rp = papi;
    }
    /**
    * Create a new directory in the host system, if the opational recursive argument is set to
    * true it will create all the necessary subdirectories instead of just the specified one.
    */
    mkdir(file, recursive) {
        if (recursive === true) {
            this.rp.call(`mkdir -p ${file}`);
        }
        else {
            this.rp.call(`mkdir ${file}`);
        }
        return true;
    }
    /**
    * Deletes a file
    */
    unlink(file) {
        this.rp.call(`rm ${file}`);
        return true;
    }
    /**
    * Change current directory
    */
    chdir(path) {
        this.rp.call(`cd ${path}`);
        return true;
    }
    ls() {
        return this.rp.call(`ls -q`).trim().split('\n');
    }
    fileExists(path) {
        // TODO
        return false;
    }
    /**
    * Opens an URL or application
    * calls `xdg-open` on linux, `start` on windows, `open` on Mac
    */
    open(arg) {
        this.rp.call(`open ${arg}`);
    }
    system(cmd) {
        this.rp.call(`!${cmd}`);
        return 0;
    }
    run(path) {
        this.rp.call(`rm ${path}`);
        return 0;
    }
    mount(fstype, path) {
        this.rp.call(`m ${fstype} ${path}`);
        return true;
    }
    umount(path) {
        this.rp.call(`m-${path}`);
    }
    chdir2(path) {
        if (path === undefined) {
            path = "/";
        }
        this.rp.call(`mdq ${path}`);
        return true;
    }
    ls2(path) {
        if (path === undefined) {
            path = "/";
        }
        return this.rp.call(`mdq ${path}`).trim().split('\n');
    }
    enumerateMountpoints() {
        return this.rp.cmdj("mlj");
    }
    isSymlink(file) {
        return false;
    }
    isDirectory(file) {
        return false;
    }
}
G.R2PapiShell = R2PapiShell;
Object.defineProperty(G, "__esModule", { value: true });
G.EsilParser = G.EsilNode = G.EsilToken = void 0;
// ("this is just a comment"), -- comments are also part of the runtime
/*
=("//", {
    =(obj, {}())
    =([obj, comment], 32)
    if(eq([obj,comment], 32),
        ret()
    )
    ret(obj)
})
*/
class EsilToken {
    constructor(text = "", position = 0) {
        this.label = "";
        this.comment = "";
        this.text = "";
        this.addr = "0"; // for ut64 we use strings for numbers :<
        this.position = 0;
        this.text = text;
        this.position = position;
    }
    toString() {
        return this.text;
    }
}
G.EsilToken = EsilToken;
class EsilNode {
    constructor(token = new EsilToken(), type = "none") {
        this.type = "none";
        this.token = token;
        this.children = [];
    }
    setSides(lhs, rhs) {
        this.lhs = lhs;
        this.rhs = rhs;
    }
    addChildren(ths, fhs) {
        if (ths !== undefined) {
            this.children.push(ths);
        }
        if (fhs !== undefined) {
            this.children.push(fhs);
        }
    }
    toEsil() {
        if (this.lhs !== undefined && this.rhs !== undefined) {
            // XXX handle ?{ }{ }
            let left = this.lhs.toEsil();
            if (left !== "") {
                left += ",";
            }
            let right = this.rhs.toEsil();
            return `${right},${left}${this.token}`;
        }
        return ''; // this.token.text;
    }
    toString() {
        let str = "";
        if (this.token.label !== "") {
            str += this.token.label + ":\n";
        }
        if (this.token.addr !== "0") {
            // str += "//  @ " + this.token.addr + "\n";
        }
        if (this.token.comment !== "") {
            str += "/*" + this.token.comment + "*/\n";
        }
        if (this.token.toString() === "GOTO") {
            if (this.children.length > 0) {
                const children = this.children[0];
                str += "goto label_" + children.token.position + ";\n";
            }
            else {
                // console.log(JSON.stringify(this,null, 2));
                let pos = 0;
                str += `goto label_${pos};\n`;
            }
        }
        if (this.children.length > 0) {
            str += `  (if (${this.rhs})\n`;
            for (let children of this.children) {
                if (children !== null) {
                    const x = children.toString();
                    if (x != "") {
                        str += `  ${x}\n`;
                    }
                }
            }
            str += "  )\n";
        }
        if (this.lhs !== undefined && this.rhs !== undefined) {
            return str + `    ( ${this.lhs} ${this.token} ${this.rhs} )`;
            // return str + `${this.lhs} ${this.token} ${this.rhs}`;
        }
        return str + this.token.toString();
    }
}
G.EsilNode = EsilNode;
class EsilParser {
    constructor(r2) {
        this.cur = 0;
        this.r2 = r2;
        this.cur = 0;
        this.stack = [];
        this.nodes = [];
        this.tokens = [];
        this.root = new EsilNode(new EsilToken("function", 0), "block");
    }
    toJSON() {
        if (this.stack.length > 0) {
            // return JSON.stringify (this.stack, null, 2);
            throw new Error("The ESIL stack is not empty");
        }
        return JSON.stringify(this.root, null, 2);
    }
    toEsil() {
        return this.nodes
            .map((x) => x.toEsil())
            .join(',');
    }
    optimizeFlags(node) {
        if (node.rhs !== undefined) {
            this.optimizeFlags(node.rhs);
        }
        if (node.lhs !== undefined) {
            this.optimizeFlags(node.lhs);
        }
        for (let i = 0; i < node.children.length; i++) {
            this.optimizeFlags(node.children[i]);
        }
        const addr = node.toString();
        if (+addr > 4096) {
            const fname = r2.cmd(`fd.@ ${addr}`).trim().split("\n")[0].trim();
            if (fname != "" && fname.indexOf("+") === -1) {
                node.token.text = fname;
            }
        }
    }
    optimize(options) {
        if (options.indexOf("flag") != -1) {
            this.optimizeFlags(this.root);
        }
    }
    toString() {
        return this.root.children
            .map((x) => x.toString())
            .join(';\n');
    }
    reset() {
        this.nodes = [];
        this.stack = [];
        this.tokens = [];
        this.cur = 0;
        this.root = new EsilNode(new EsilToken("function", 0), "block");
    }
    parseRange(from, to) {
        let pos = from;
        while (pos < this.tokens.length && pos < to) {
            const token = this.peek(pos);
            if (!token) {
                // console.log("BREAK");
                break;
            }
            // console.log(pos, token);
            this.cur = pos;
            this.pushToken(token);
            pos = this.cur;
            pos++;
        }
        // console.log("done");
    }
    parseFunction(addr) {
        var ep = this;
        function parseAmount(n) {
            // console.log("PDQ "+n);
            const lines = r2.cmd("pie " + n + " @e:scr.color=0").trim().split("\n");
            for (const line of lines) {
                if (line.length === 0) {
                    console.log("Empty");
                    continue;
                }
                // console.log("parse", r2.cmd("?v:$$"));
                const kv = line.split(' ');
                if (kv.length > 1) { // line != "") {
                    // console.log("// @ " + kv[0]);
                    //ep.reset ();
                    r2.cmd(`s ${kv[0]}`);
                    ep.parse(kv[1], kv[0]);
                    ep.optimize("flags,labels");
                    //console.log(ep.toString());
                }
            }
            // console.log(ep.toString());
        }
        const oaddr = r2.cmd("?v $$").trim();
        // const func = r2.cmdj("pdrj"); // XXX this command changes the current seek
        if (addr === undefined) {
            addr = oaddr;
        }
        const bbs = r2.cmdj(`afbj@${addr}`); // XXX this command changes the current seek
        for (let bb of bbs) {
            // console.log("bb_" + bb.addr + ":");
            r2.cmd(`s ${bb.addr}`);
            parseAmount(bb.ninstr);
        }
        r2.cmd(`s ${oaddr}`);
    }
    parse(expr, addr) {
        const tokens = expr.trim().split(',').map((x) => x.trim());
        const from = this.tokens.length;
        for (let tok of tokens) {
            const token = new EsilToken(tok, this.tokens.length);
            if (addr !== undefined) {
                token.addr = addr;
            }
            this.tokens.push(token);
        }
        const to = this.tokens.length;
        this.parseRange(from, to);
    }
    peek(a) {
        return this.tokens[a];
    }
    pushToken(tok) {
        if (this.isNumber(tok)) {
            const node = new EsilNode(tok, "number");
            this.stack.push(node);
            this.nodes.push(node);
        }
        else if (this.isInternal(tok)) {
            const node = new EsilNode(tok, "flag");
            this.stack.push(node);
            this.nodes.push(node);
        }
        else if (this.isOperation(tok)) {
            // run the operation login
        }
        else {
            // assume it's a register, so just push the string
            const node = new EsilNode(tok, "register");
            this.stack.push(node);
            this.nodes.push(node);
        }
        // we need a list of register names to do this check properly
        // throw new Error ("Unknown token");
    }
    isNumber(expr) {
        if (expr.toString().startsWith("0")) {
            return true;
        }
        return +expr > 0;
    }
    isInternal(expr) {
        const text = expr.toString();
        return text.startsWith("$") && text.length > 1;
    }
    parseUntil(start) {
        const from = start + 1;
        let pos = from;
        const origStack = [];
        const this_nodes_length = this.nodes.length;
        this.stack.forEach((x) => origStack.push(x));
        while (pos < this.tokens.length) {
            const token = this.peek(pos);
            if (!token) {
                break;
            }
            if (token.toString() === '}') {
                break;
            }
            if (token.toString() === '}{') {
                // return token;
                break;
            }
            // console.log("peek ", this.tokens[pos]);
            pos++;
        }
        this.stack = origStack;
        const to = pos;
        this.parseRange(from, to);
        const same = this.nodes.length == this_nodes_length;
        // console.log("BLOCK ("+ ep.toString());
        if (same) {
            return null;
        }
        return this.nodes[this.nodes.length - 1]; // this.tokens.length - 1];
    }
    getNodeFor(index) {
        const tok = this.peek(index);
        if (tok === undefined) {
            return null;
        }
        for (let node of this.nodes) {
            if (node.token.position === index) {
                return node;
            }
        }
        this.nodes.push(new EsilNode(new EsilToken("label", index), "label"));
        return null;
    }
    findNodeFor(index) {
        for (let node of this.nodes) {
            if (node.token.position === index) {
                return node;
            }
        }
        return null;
    }
    isOperation(expr) {
        switch (expr.toString()) {
            // 1pop1push
            case "[1]":
            case "[2]":
            case "[4]":
            case "[8]":
                if (this.stack.length >= 1) {
                    const i1 = this.stack.pop();
                    // TODO: MemoryReferenceNode(i1));
                    const mn = new EsilNode(i1.token, "operation"); // expr.toString());
                    this.stack.push(i1); // mn);
                }
                else {
                    throw new Error("Stack needs more items");
                }
                return true;
            // 1pop1push
            case "!":
                if (this.stack.length >= 1) {
                    const i0 = new EsilNode(new EsilToken("", expr.position), "none");
                    const i1 = this.stack.pop();
                    const nn = new EsilNode(expr, "operation");
                    nn.setSides(i0, i1);
                    this.stack.push(nn);
                }
                else {
                    throw new Error("Stack needs more items");
                }
                return true;
            case "":
            case "}":
            case "}{":
                // no pops or nothing, just does nothing
                return true;
            case "DUP":
                if (true) {
                    if (this.stack.length < 1) {
                        throw new Error("goto cant pop");
                    }
                    const destNode = this.stack.pop();
                    this.stack.push(destNode);
                    this.stack.push(destNode);
                }
                return true;
            case "GOTO":
                // take previous statement which should be const and add a label
                const prev = this.peek(expr.position - 1);
                if (prev !== null) {
                    // TODO: check stack
                    if (this.stack.length < 1) {
                        throw new Error("goto cant pop");
                    }
                    const destNode = this.stack.pop();
                    if (destNode !== null) {
                        const value = 0 | +destNode.toString();
                        if (value > 0) {
                            const destToken = this.peek(value);
                            if (destToken !== undefined) {
                                destToken.label = "label_" + value;
                                destToken.comment = "hehe";
                                const nn = new EsilNode(expr, "goto");
                                const gn = this.getNodeFor(destToken.position);
                                if (gn != null) {
                                    nn.children.push(gn);
                                }
                                this.root.children.push(nn);
                            }
                            else {
                                console.error("Cannot find goto node");
                            }
                        }
                        else {
                            console.error("Cannot find dest node for goto");
                        }
                    }
                }
                return true;
            // controlflow
            case "?{": // ESIL_TOKEN_IF
                if (this.stack.length >= 1) {
                    const i0 = new EsilNode(new EsilToken("if", expr.position), "none");
                    const i1 = this.stack.pop();
                    const nn = new EsilNode(expr, "operation");
                    nn.setSides(i0, i1); // left side can be ignored for now.. but we can express this somehow
                    let trueBlock = this.parseUntil(expr.position);
                    let falseBlock = null;
                    // nn.addChildren(trueBlock, falseBlock);
                    if (trueBlock !== null) {
                        nn.children.push(trueBlock);
                        this.nodes.push(trueBlock);
                        falseBlock = this.parseUntil(trueBlock.token.position + 1);
                        if (falseBlock !== null) {
                            nn.children.push(falseBlock);
                            this.nodes.push(falseBlock);
                        }
                    }
                    // console.log("true", trueBlock);
                    // console.log("false", falseBlock);
                    // this.stack.push(nn);
                    this.nodes.push(nn);
                    this.root.children.push(nn);
                    if (falseBlock !== null) {
                        this.cur = falseBlock.token.position;
                    }
                }
                else {
                    throw new Error("Stack needs more items");
                }
                return true;
            case "-":
                if (this.stack.length >= 2) {
                    const i0 = this.stack.pop();
                    const i1 = this.stack.pop();
                    const nn = new EsilNode(expr, "operation");
                    nn.setSides(i0, i1);
                    if (this.stack.length === 0) {
                        //	this.root.children.push(nn);
                    }
                    this.stack.push(nn);
                    this.nodes.push(nn);
                }
                else {
                    throw new Error("Stack needs more items");
                }
                return true;
            // 2pop1push
            case "<":
            case ">":
            case "^":
            case "&":
            case "|":
            case "+":
            case "*":
            case "/":
            case ">>=":
            case "<<=":
            case ">>>=":
            case "<<<=":
            case ">>>>=":
            case "<<<<=":
                if (this.stack.length >= 2) {
                    const i0 = this.stack.pop();
                    const i1 = this.stack.pop();
                    const nn = new EsilNode(expr, "operation");
                    nn.setSides(i0, i1);
                    if (this.stack.length === 0) {
                        //	this.root.children.push(nn);
                    }
                    this.stack.push(nn);
                    this.nodes.push(nn);
                }
                else {
                    throw new Error("Stack needs more items");
                }
                return true;
            // 2pop0push
            case "=":
            case ":=":
            case "-=":
            case "+=":
            case "==":
            case "=[1]":
            case "=[2]":
            case "=[4]":
            case "=[8]":
                if (this.stack.length >= 2) {
                    const i0 = this.stack.pop();
                    const i1 = this.stack.pop();
                    const nn = new EsilNode(expr, "operation");
                    nn.setSides(i0, i1);
                    if (this.stack.length === 0) {
                        this.root.children.push(nn);
                    }
                    this.nodes.push(nn);
                }
                else {
                    throw new Error("Stack needs more items");
                }
                return true;
        }
        return false;
    }
}
G.EsilParser = EsilParser;
const r2pipe_js_1 = G;
