NAME=ao 10~bytes
FILE=bins/pe/15004.file
CMDS=ao 10~bytes
EXPECT=<<EOF
bytes: e8d8170000
bytes: 8d642444
bytes: 0f85a6300000
bytes: 60
bytes: e84f0d0000
bytes: f6d0
bytes: 8d81c6140e8f
bytes: 50
bytes: 891c24
bytes: 9c
EOF
RUN

NAME=hang-on-aa/-aac fix (#15004)
FILE=bins/pe/15004.file
CMDS=<<EOF
e anal.vars.stackname=true
aa
e asm.var=false
pdb
EOF
EXPECT=<<EOF
/ 337: entry0 (int32_t arg_4h, int32_t arg_1dh, int32_t arg_31h, int32_t arg_0h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_1ch, int32_t arg_24h, int32_t arg_2ch, int32_t arg_30h, int32_t arg_38h, int32_t arg_3ch, int32_t arg_3eh, int32_t arg_40h, int32_t arg_44h, int32_t arg_48h, int32_t arg_4ch, int32_t arg_50h, int32_t arg_68h, int32_t arg_80h);
|           0x006453a1      e8d8170000     call fcn.00646b7e
|           0x006453a6      8d642444       lea esp, [arg_44h]
|       ,=< 0x006453aa      0f85a6300000   jne 0x648456
EOF
RUN

NAME=aap
FILE=bins/pe/NoREpls.exe
CMDS=<<EOF
aaa
s 0x00401e80
afi.
aap
afi.
EOF
EXPECT=<<EOF
fcn.00401e80
EOF
RUN

NAME=anal.pushret
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=64
"wa push 10;ret;nop;nop;nop;nop;nop;nop;nop;ret"
e anal.pushret=true
af
afi~size
EOF
EXPECT=<<EOF
size: 11
EOF
RUN


NAME=aac pe trampoline fcn name 32bit
FILE=bins/pe/testx32.exe
CMDS=<<EOF
e anal.autoname=false
aac
pd 1 @ 0x004017f6
EOF
EXPECT=<<EOF
|           0x004017f6      e8c5040000     call sub.KERNEL32.dll_IsProcessorFeaturePresent ; BOOL IsProcessorFeaturePresent(DWORD ProcessorFeature)
EOF
RUN

NAME=a2f 8 bbs 4 ret and some jumps
FILE=malloc://512
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 85c0740585c07405c385c0eb01c385c07401c3b8efbeaddec3
a2f
afb
EOF
EXPECT=<<EOF
0x00000000 0x00000004 00:0000 4 j 0x00000009 f 0x00000004
0x00000004 0x00000008 00:0000 4 j 0x0000000d f 0x00000008
0x00000008 0x00000009 00:0000 1
0x00000009 0x0000000d 00:0000 4 j 0x0000000e
0x0000000d 0x0000000e 00:0000 1
0x0000000e 0x00000012 00:0000 4 j 0x00000013 f 0x00000012
0x00000012 0x00000013 00:0000 1
0x00000013 0x00000019 00:0000 6
EOF
RUN

NAME=a2f 3bbs with entry in the middle of the function
FILE=malloc://512
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 31c031c983c10183c10285c975f231c931c040c3
s 0xa
a2f
afb
EOF
EXPECT=<<EOF
0x00000000 0x0000000a 00:0000 10 j 0x0000000a
0x0000000a 0x0000000e 00:0000 4 j 0x00000000 f 0x0000000e
0x0000000e 0x00000014 00:0000 6
EOF
RUN

NAME=a2f 6 bbs with entry at the end of the function
FILE=malloc://512
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 31c083c00183e801750831c083e80183c00131c983c10183e90175e431d283ea0183c2017402ebd831c0c3
s 0x26
a2f
afb
EOF
EXPECT=<<EOF
0x00000000 0x0000000a 00:0000 10 j 0x00000012 f 0x0000000a
0x0000000a 0x00000012 00:0000 8 j 0x00000012
0x00000012 0x0000001c 00:0000 10 j 0x00000000 f 0x0000001c
0x0000001c 0x00000026 00:0000 10 j 0x00000028 f 0x00000026
0x00000026 0x00000028 00:0000 2 j 0x00000000
0x00000028 0x0000002b 00:0000 3
EOF
RUN

NAME=a2f cjmp
FILE=malloc://0x5000
CMDS=<<EOF
e asm.arch = x86
e anal.arch = x86
e io.cache=true
e asm.bits=32
wx 31c0740140c3
a2f
afb
EOF
EXPECT=<<EOF
0x00000000 0x00000004 00:0000 4 j 0x00000005 f 0x00000004
0x00000004 0x00000005 00:0000 1 j 0x00000005
0x00000005 0x00000006 00:0000 1
EOF
RUN

NAME=aaa with axt
FILE=bins/pe/keygen.exe
CMDS=<<EOF
aar
axt 0x4bffb0
EOF
EXPECT=<<EOF
(nofunc) 0x4bfe53 [DATA:r--] mov edx, 0x4bffb0
EOF
RUN

NAME=aaa with maxbbsz
FILE=bins/pe/flare_notepad.ex
CMDS=<<EOF
e anal.bb.maxsize = 2048
aaa
pdf~?ret
EOF
EXPECT=<<EOF
1
EOF
RUN

NAME=cyclomatic
FILE=bins/pe/rabin2.exe
CMDS=<<EOF
s 0x140002510;af;afi~complex[1]
afb.@0x14000253e
EOF
EXPECT=<<EOF
67
0x14000253e 0x14000255e 00:0000 32 s 0x140002579 s 0x14000255e s 0x1400025e1 s 0x14000258c s 0x1400025a1 s 0x1400025b6 s 0x1400025c9
EOF
RUN

NAME=lab1B
FILE=bins/elf/lab1B
BROKEN=1
CMDS=<<EOF
s 0x08048a8b
af
afb
?e
pdf
EOF
EXPECT=<<EOF
0x08048a8b 0x08048a91 00:0000 6 j 0x08048bd5 f 0x08048a91
0x08048a91 0x08048aa0 00:0000 15
0x08048bd5 0x08048be4 00:0000 15

/ (fcn) fcn.08048a8b 36
|   fcn.08048a8b ();
|           ; var int var_ch @ ebp-0xc
|       ,=< 0x08048a8b      0f8744010000   ja 0x8048bd5
|       |   0x08048a91      8b45f4         mov eax, dword [var_ch]
|       |   0x08048a94      c1e002         shl eax, 2
|       |   0x08048a97      05308d0408     add eax, 0x8048d30
|       |   0x08048a9c      8b00           mov eax, dword [eax]
|       |   0x08048a9e      ffe0           jmp eax
..
| ||||||`-> 0x08048bd5      e856fcffff     call sym.imp.rand           ; int rand(void)
| ||||||    0x08048bda      890424         mov dword [esp], eax
| ||||||    0x08048bdd      e8d5fdffff     call sym.decrypt
| ``````--> 0x08048be2      c9             leave
\           0x08048be3      c3             ret
EOF
RUN

NAME=bug-cjmp
FILE=bins/mach0/bug-cjmp
CMDS=<<EOF
af
afb
EOF
EXPECT=<<EOF
0x100000f30 0x100000f4c 00:0000 28 j 0x100000f61 f 0x100000f4c
0x100000f4c 0x100000f61 00:0000 21 j 0x100000f79
0x100000f61 0x100000f70 00:0000 15
0x100000f79 0x100000f82 00:0000 9
EOF
RUN

NAME=bug-cjmp-ok
FILE=bins/mach0/bug-cjmp-ok
CMDS=<<EOF
af
afb
EOF
EXPECT=<<EOF
0x100000f30 0x100000f4c 00:0000 28 j 0x100000f61 f 0x100000f4c
0x100000f4c 0x100000f61 00:0000 21 j 0x100000f79
0x100000f61 0x100000f79 00:0000 24 j 0x100000f79
0x100000f79 0x100000f82 00:0000 9
EOF
RUN

NAME=x86: fastcall argument analysis
FILE=bins/elf/analysis/fast
CMDS=aa ; s sym.fastcaslled ; afc fastcall ; afva ; pdf~arg,var
EXPECT=<<EOF
/ 59: sym.fastcaslled (int32_t arg1, int32_t arg2, int32_t arg_8h, int32_t arg_ch);
|           ; arg int32_t arg1 @ ecx
|           ; arg int32_t arg2 @ edx
|           ; arg int32_t arg_8h @ ebp+0x8
|           ; arg int32_t arg_ch @ ebp+0xc
|           ; var int32_t var_ch @ ebp-0xc
|           ; var int32_t var_10h @ ebp-0x10
|           ; var int32_t var_1ch @ ebp-0x1c
|           ; var int32_t var_20h @ ebp-0x20
|           0x08048421      894de4         mov dword [var_1ch], ecx    ; arg1
|           0x08048424      8955e0         mov dword [var_20h], edx    ; arg2
|           0x08048427      8b55e4         mov edx, dword [var_1ch]
|           0x0804842a      8b45e0         mov eax, dword [var_20h]
|           0x0804842f      8945f4         mov dword [var_ch], eax
|           0x08048432      8b45e0         mov eax, dword [var_20h]
|           0x08048435      2b450c         sub eax, dword [arg_ch]
|           0x08048438      8945f0         mov dword [var_10h], eax
|           0x0804843b      ff7508         push dword [arg_8h]
|           0x0804843e      ff75f0         push dword [var_10h]
|           0x08048441      ff75f4         push dword [var_ch]
EOF
RUN

NAME=adf bug #16215
FILE=-
CMDS=adf
EXPECT=<<EOF
EOF
RUN

NAME=adf analysis on an obfuscated executable
FILE=bins/pe/cmd_adf_sample0.exe
BROKEN=1
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e asm.os=linux
e asm.lines.jmp=false
e asm.lines.out=false
e asm.bytes=false
e asm.indentspace=0
e asm.jmphints=false
e asm.xrefs=false
e asm.functions=false
e asm.fcncalls=false
e asm.lines.fcn=false
e scr.utf8=false
e anal.calls=false
e anal.jmp.cref=false
e anal.jmp.above=true
e anal.jmp.ref=true
e anal.split=true
# HACK to avoid ASAN taking too long on the CI.. this is broken anyway
e anal.bb.maxsize=1K
adf @ sym.testObf27.exe_VirtMe
.adf @ sym.testObf27.exe_VirtMe
adf @ 0x00560e67
.adf @ 0x00560e67
pd 4 @ 0x00560e67
EOF
EXPECT=<<EOF
0x00560e67      push esi
0x00560e68      jmp 0x560e7d
0x00560e6d hex length=16 delta=0
0x00560e6d  51e5 d61d 31ea ce05 063b d4d4 1b00 8596  Q...1....;......

0x00560e7d      pop esi
EOF
RUN

NAME=af anal
FILE=bins/elf/echo-bin
CMDS=<<EOF
aaa
s 0x1144
afi~name
EOF
EXPECT=<<EOF
name: main
EOF
RUN

NAME=af anal
FILE=bins/elf/echo-bin
CMDS=<<EOF
aaa
s 0x1144
afi~name
EOF
EXPECT=<<EOF
name: main
EOF
RUN

NAME=af 8 bbs 4 ret and some jumps
FILE=malloc://512
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 85c0740585c07405c385c0eb01c385c07401c3b8efbeaddec3
af
afb
EOF
EXPECT=<<EOF
0x00000000 0x00000004 00:0000 4 j 0x00000009 f 0x00000004
0x00000004 0x00000008 00:0000 4 j 0x0000000d f 0x00000008
0x00000008 0x00000009 00:0000 1
0x00000009 0x0000000d 00:0000 4 j 0x0000000e
0x0000000d 0x0000000e 00:0000 1
0x0000000e 0x00000012 00:0000 4 j 0x00000013 f 0x00000012
0x00000012 0x00000013 00:0000 1
0x00000013 0x00000019 00:0000 6
EOF
RUN

NAME=af 3bbs with entry in the middle of the function
FILE=malloc://512
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 31c031c983c10183c10285c975f231c931c040c3
s 0xa
af
afb
EOF
EXPECT=<<EOF
0x00000000 0x0000000a 00:0000 10 j 0x0000000a
0x0000000a 0x0000000e 00:0000 4 j 0x00000000 f 0x0000000e
0x0000000e 0x00000014 00:0000 6
EOF
RUN

NAME=af 6 bbs with entry at the end of the function
FILE=malloc://512
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 31c083c00183e801750831c083e80183c00131c983c10183e90175e431d283ea0183c2017402ebd831c0c3
s 0x26
af
afb
EOF
EXPECT=<<EOF
0x00000000 0x0000000a 00:0000 10 j 0x00000012 f 0x0000000a
0x0000000a 0x00000012 00:0000 8 j 0x00000012
0x00000012 0x0000001c 00:0000 10 j 0x00000000 f 0x0000001c
0x0000001c 0x00000026 00:0000 10 j 0x00000028 f 0x00000026
0x00000026 0x00000028 00:0000 2 j 0x00000000
0x00000028 0x0000002b 00:0000 3
EOF
RUN

NAME=af+afl on pe/test
FILE=bins/pe/test.exe
CMDS=<<EOF
s 0x401000
af
afl
EOF
EXPECT=<<EOF
0x00401000    1     59 main
0x004010e4    4    148 fcn.004010e4
0x004010c7    1     29 fcn.004010c7
0x0040104a    4    109 fcn.0040104a
0x0040103b    6    277 fcn.0040103b
0x00404ad7    1      8 fcn.00404ad7
EOF
RUN

NAME=anal.fcnprefix
FILE=bins/pe/test.exe
CMDS=<<EOF
s 0x401000
e anal.fcnprefix=root
af
afl
EOF
EXPECT=<<EOF
0x00401000    1     59 main
0x004010e4    4    148 root.004010e4
0x004010c7    1     29 root.004010c7
0x0040104a    4    109 root.0040104a
0x0040103b    6    277 root.0040103b
0x00404ad7    1      8 root.00404ad7
EOF
RUN

NAME=syscall emu
FILE=bins/elf/analysis/hello.raw
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e asm.os=linux
e asm.emu=true
e asm.bytes=0
e asm.cmt.col=20
e asm.lines.jmp=false
pd 20~write,exit
EOF
EXPECT=<<EOF
  0x00000014      int 0x80 ; 4 = write (1, "Hello, world!.", 14)
  0x0000001b      int 0x80 ; 1 = exit (1)
EOF
RUN

NAME=Windows Function EMU printf
FILE=bins/pe/standard.exe
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e asm.os=windows
e asm.emu=true
e emu.write=true
e asm.bytes=0
e asm.cmt.col=20
e asm.lines.jmp=false
aeim
s 0x00402ade
pd 4~printf
EOF
EXPECT=<<EOF
  0x00402ae8      call dword [sym.imp.msvcrt.dll_printf] ; 0x402d48 ; esp=0x177ff8 ; [0x00177ff8:4] = 0x402aee ; eip=0x2d08 reloc.msvcrt.dll_printf
                    ; int printf("  - RT_MANIFEST resource located\n")
EOF
RUN

NAME=af- bug
FILE=-
CMDS=af+ $$ foo; af- $$;afl~?
EXPECT=<<EOF
0
EOF
RUN

NAME=anal.recont=true
FILE=bins/pe/bcc1.ex
CMDS=<<EOF
e anal.recont=true
af
afb
afb @ 0x401012
afb @ 0x40dfd0
EOF
EXPECT=<<EOF
0x00401000 0x00401002 00:0000 2 j 0x00401012
0x00401012 0x00401059 00:0000 71 j 0x0040dfd0
0x0040dfd0 0x0040e075 00:0000 165 j 0x0040e0af f 0x0040e075
0x0040e075 0x0040e094 00:0000 31 j 0x0040e0a8
0x0040e094 0x0040e0a8 00:0000 20 j 0x0040e0a8
0x0040e0a8 0x0040e0af 00:0000 7 j 0x0040e094 f 0x0040e0af
0x0040e0af 0x0040e0c4 00:0000 21 j 0x0040e12b f 0x0040e0c4
0x0040e0c4 0x0040e0cc 00:0000 8 j 0x0040e0cd
0x0040e0cc 0x0040e0cd 00:0000 1 j 0x0040e0cd
0x0040e0cd 0x0040e0d3 00:0000 6 j 0x0040e0cc f 0x0040e0d3
0x0040e0d3 0x0040e0d7 00:0000 4 j 0x0040e0cc f 0x0040e0d7
0x0040e0d7 0x0040e0dc 00:0000 5 j 0x0040e0e1 f 0x0040e0dc
0x0040e0dc 0x0040e0e1 00:0000 5 j 0x0040e0e6
0x0040e0e1 0x0040e0e5 00:0000 4 j 0x0040e0e6
0x0040e0e5 0x0040e0e6 00:0000 1 j 0x0040e0e6
0x0040e0e6 0x0040e0ec 00:0000 6 j 0x0040e0f4 f 0x0040e0ec
0x0040e0ec 0x0040e0f0 00:0000 4 j 0x0040e0f4 f 0x0040e0f0
0x0040e0f0 0x0040e0f4 00:0000 4 j 0x0040e0e5 f 0x0040e0f4
0x0040e0f4 0x0040e0f9 00:0000 5 j 0x0040e0fd f 0x0040e0f9
0x0040e0f9 0x0040e0fc 00:0000 3 j 0x0040e0fd
0x0040e0fc 0x0040e0fd 00:0000 1 j 0x0040e0fd
0x0040e0fd 0x0040e103 00:0000 6 j 0x0040e107 f 0x0040e103
0x0040e103 0x0040e107 00:0000 4 j 0x0040e0fc f 0x0040e107
0x0040e107 0x0040e10b 00:0000 4 j 0x0040e0fc f 0x0040e10b
0x0040e10b 0x0040e12b 00:0000 32 j 0x0040e14c
0x0040e12b 0x0040e14c 00:0000 33 j 0x0040e14c
0x0040e14c 0x0040e153 00:0000 7
0x00401000 0x00401002 00:0000 2 j 0x00401012
0x00401012 0x00401059 00:0000 71 j 0x0040dfd0
0x0040dfd0 0x0040e075 00:0000 165 j 0x0040e0af f 0x0040e075
0x0040e075 0x0040e094 00:0000 31 j 0x0040e0a8
0x0040e094 0x0040e0a8 00:0000 20 j 0x0040e0a8
0x0040e0a8 0x0040e0af 00:0000 7 j 0x0040e094 f 0x0040e0af
0x0040e0af 0x0040e0c4 00:0000 21 j 0x0040e12b f 0x0040e0c4
0x0040e0c4 0x0040e0cc 00:0000 8 j 0x0040e0cd
0x0040e0cc 0x0040e0cd 00:0000 1 j 0x0040e0cd
0x0040e0cd 0x0040e0d3 00:0000 6 j 0x0040e0cc f 0x0040e0d3
0x0040e0d3 0x0040e0d7 00:0000 4 j 0x0040e0cc f 0x0040e0d7
0x0040e0d7 0x0040e0dc 00:0000 5 j 0x0040e0e1 f 0x0040e0dc
0x0040e0dc 0x0040e0e1 00:0000 5 j 0x0040e0e6
0x0040e0e1 0x0040e0e5 00:0000 4 j 0x0040e0e6
0x0040e0e5 0x0040e0e6 00:0000 1 j 0x0040e0e6
0x0040e0e6 0x0040e0ec 00:0000 6 j 0x0040e0f4 f 0x0040e0ec
0x0040e0ec 0x0040e0f0 00:0000 4 j 0x0040e0f4 f 0x0040e0f0
0x0040e0f0 0x0040e0f4 00:0000 4 j 0x0040e0e5 f 0x0040e0f4
0x0040e0f4 0x0040e0f9 00:0000 5 j 0x0040e0fd f 0x0040e0f9
0x0040e0f9 0x0040e0fc 00:0000 3 j 0x0040e0fd
0x0040e0fc 0x0040e0fd 00:0000 1 j 0x0040e0fd
0x0040e0fd 0x0040e103 00:0000 6 j 0x0040e107 f 0x0040e103
0x0040e103 0x0040e107 00:0000 4 j 0x0040e0fc f 0x0040e107
0x0040e107 0x0040e10b 00:0000 4 j 0x0040e0fc f 0x0040e10b
0x0040e10b 0x0040e12b 00:0000 32 j 0x0040e14c
0x0040e12b 0x0040e14c 00:0000 33 j 0x0040e14c
0x0040e14c 0x0040e153 00:0000 7
0x00401000 0x00401002 00:0000 2 j 0x00401012
0x00401012 0x00401059 00:0000 71 j 0x0040dfd0
0x0040dfd0 0x0040e075 00:0000 165 j 0x0040e0af f 0x0040e075
0x0040e075 0x0040e094 00:0000 31 j 0x0040e0a8
0x0040e094 0x0040e0a8 00:0000 20 j 0x0040e0a8
0x0040e0a8 0x0040e0af 00:0000 7 j 0x0040e094 f 0x0040e0af
0x0040e0af 0x0040e0c4 00:0000 21 j 0x0040e12b f 0x0040e0c4
0x0040e0c4 0x0040e0cc 00:0000 8 j 0x0040e0cd
0x0040e0cc 0x0040e0cd 00:0000 1 j 0x0040e0cd
0x0040e0cd 0x0040e0d3 00:0000 6 j 0x0040e0cc f 0x0040e0d3
0x0040e0d3 0x0040e0d7 00:0000 4 j 0x0040e0cc f 0x0040e0d7
0x0040e0d7 0x0040e0dc 00:0000 5 j 0x0040e0e1 f 0x0040e0dc
0x0040e0dc 0x0040e0e1 00:0000 5 j 0x0040e0e6
0x0040e0e1 0x0040e0e5 00:0000 4 j 0x0040e0e6
0x0040e0e5 0x0040e0e6 00:0000 1 j 0x0040e0e6
0x0040e0e6 0x0040e0ec 00:0000 6 j 0x0040e0f4 f 0x0040e0ec
0x0040e0ec 0x0040e0f0 00:0000 4 j 0x0040e0f4 f 0x0040e0f0
0x0040e0f0 0x0040e0f4 00:0000 4 j 0x0040e0e5 f 0x0040e0f4
0x0040e0f4 0x0040e0f9 00:0000 5 j 0x0040e0fd f 0x0040e0f9
0x0040e0f9 0x0040e0fc 00:0000 3 j 0x0040e0fd
0x0040e0fc 0x0040e0fd 00:0000 1 j 0x0040e0fd
0x0040e0fd 0x0040e103 00:0000 6 j 0x0040e107 f 0x0040e103
0x0040e103 0x0040e107 00:0000 4 j 0x0040e0fc f 0x0040e107
0x0040e107 0x0040e10b 00:0000 4 j 0x0040e0fc f 0x0040e10b
0x0040e10b 0x0040e12b 00:0000 32 j 0x0040e14c
0x0040e12b 0x0040e14c 00:0000 33 j 0x0040e14c
0x0040e14c 0x0040e153 00:0000 7
EOF
RUN

NAME=afb twice
FILE=bins/pe/bcc1.ex
CMDS=<<EOF
e anal.recont=true
e anal.depth=100
e anal.hasnext=true
af @ 0x40dfd0
af;afb;afb @ 0x40dfd0
EOF
EXPECT=<<EOF
0x00401000 0x00401002 00:0000 2 j 0x00401012
0x00401012 0x00401059 00:0000 71
0x0040dfd0 0x0040e075 00:0000 165 j 0x0040e0af f 0x0040e075
0x0040e075 0x0040e094 00:0000 31 j 0x0040e0a8
0x0040e094 0x0040e0a8 00:0000 20 j 0x0040e0a8
0x0040e0a8 0x0040e0af 00:0000 7 j 0x0040e094 f 0x0040e0af
0x0040e0af 0x0040e0c4 00:0000 21 j 0x0040e12b f 0x0040e0c4
0x0040e0c4 0x0040e0cc 00:0000 8 j 0x0040e0cd
0x0040e0cc 0x0040e0cd 00:0000 1 j 0x0040e0cd
0x0040e0cd 0x0040e0d3 00:0000 6 j 0x0040e0cc f 0x0040e0d3
0x0040e0d3 0x0040e0d7 00:0000 4 j 0x0040e0cc f 0x0040e0d7
0x0040e0d7 0x0040e0dc 00:0000 5 j 0x0040e0e1 f 0x0040e0dc
0x0040e0dc 0x0040e0e1 00:0000 5 j 0x0040e0e6
0x0040e0e1 0x0040e0e5 00:0000 4 j 0x0040e0e6
0x0040e0e5 0x0040e0e6 00:0000 1 j 0x0040e0e6
0x0040e0e6 0x0040e0ec 00:0000 6 j 0x0040e0f4 f 0x0040e0ec
0x0040e0ec 0x0040e0f0 00:0000 4 j 0x0040e0f4 f 0x0040e0f0
0x0040e0f0 0x0040e0f4 00:0000 4 j 0x0040e0e5 f 0x0040e0f4
0x0040e0f4 0x0040e0f9 00:0000 5 j 0x0040e0fd f 0x0040e0f9
0x0040e0f9 0x0040e0fc 00:0000 3 j 0x0040e0fd
0x0040e0fc 0x0040e0fd 00:0000 1 j 0x0040e0fd
0x0040e0fd 0x0040e103 00:0000 6 j 0x0040e107 f 0x0040e103
0x0040e103 0x0040e107 00:0000 4 j 0x0040e0fc f 0x0040e107
0x0040e107 0x0040e10b 00:0000 4 j 0x0040e0fc f 0x0040e10b
0x0040e10b 0x0040e12b 00:0000 32 j 0x0040e14c
0x0040e12b 0x0040e14c 00:0000 33 j 0x0040e14c
0x0040e14c 0x0040e153 00:0000 7
EOF
RUN

NAME=./followbrokenfcnsrefs
FILE=bins/pe/bdc1.ex
CMDS=<<EOF
e anal.brokenrefs=true
af
s 0x4068e8
fd
s 0x45a708
fd
s 0x45a720
fd
s 0x45a7a0
fd
s 0x4043d8
fd
EOF
EXPECT=<<EOF
fcn.004068e8
fcn.0045a708
fcn.0045a720
fcn.0045a7a0
fcn.004043d8
EOF
RUN

NAME=function address from operand
FILE=bins/pe/test.exe
CMDS=<<EOF
e anal.datarefs=true
s 0x401820
af
s 0x401880
fd
EOF
EXPECT=<<EOF
fcn.00401880
EOF
RUN

NAME=function address from data structure
FILE=bins/pe/test.exe
CMDS=<<EOF
e anal.datarefs=true
e anal.recont=true
s 0x4039ba
af
s 0x401441
fd
EOF
EXPECT=<<EOF
fcn.00401441
EOF
RUN


NAME=ensure jump within a function is added to the basic block
FILE=bins/elf/echo
CMDS=<<EOF
aaa
s 0xf34
afb.
EOF
EXPECT=<<EOF
0x00000f34 0x00000f4b 00:0000 23 j 0x00001144
EOF
RUN

NAME=Main in disassembly
FILE=bins/elf/analysis/ls2
CMDS=<<EOF
aa
pi 1 @ 0x0040488d
EOF
EXPECT=<<EOF
mov rdi, main
EOF
RUN

NAME=Main in disassembly
FILE=bins/elf/analysis/ls_main_bug
CMDS=<<EOF
aa
afi @ main ~offset
EOF
EXPECT=<<EOF
offset: 0x000038b0
EOF
RUN

NAME=calc switch table
FILE=bins/elf/calc.file
CMDS=<<EOF
af@0x8049203
f~?switch
EOF
EXPECT=<<EOF
7
EOF
RUN

NAME=mac-ls switch count
FILE=bins/mach0/mac-ls
CMDS=<<EOF
aaa
f~?switch
EOF
EXPECT=<<EOF
3
EOF
RUN

NAME=mac-ls main switch
FILE=bins/mach0/mac-ls
CMDS=<<EOF
s main;af
f~switch
f~?case
EOF
EXPECT=<<EOF
0x1000011b5 1 switch.0x1000011b5
73
EOF
RUN

NAME=mac-ls switch count2
FILE=bins/mach0/mac-ls
CMDS=<<EOF
aaa
f~?case
EOF
EXPECT=<<EOF
91
EOF
RUN

NAME=mac-ls switch count3
FILE=bins/pe/test.exe
CMDS=<<EOF
e anal.jmp.tbl=true
s 0x402cb6
af
afb
EOF
EXPECT=<<EOF
0x00402cb6 0x00402d2c 00:0000 118 j 0x00402d57 f 0x00402d2c
0x00402d2c 0x00402d45 00:0000 25 j 0x00402d4f f 0x00402d45
0x00402d45 0x00402d4f 00:0000 10 j 0x00402d4f
0x00402d4f 0x00402d57 00:0000 8 j 0x0040388e
0x00402d57 0x00402d5d 00:0000 6 j 0x00402dbb f 0x00402d5d
0x00402d5d 0x00402d6e 00:0000 17 j 0x00402d89 f 0x00402d6e
0x00402d6e 0x00402d73 00:0000 5 j 0x00402d89 f 0x00402d73
0x00402d73 0x00402d89 00:0000 22 j 0x00402d8b
0x00402d89 0x00402d8b 00:0000 2 j 0x00402d8b
0x00402d8b 0x00402d91 00:0000 6 j 0x00402d2c f 0x00402d91
0x00402d91 0x00402d96 00:0000 5 j 0x00402daf f 0x00402d96
0x00402d96 0x00402d9b 00:0000 5 j 0x00402daf f 0x00402d9b
0x00402d9b 0x00402daf 00:0000 20 j 0x00402db1
0x00402daf 0x00402db1 00:0000 2 j 0x00402db1
0x00402db1 0x00402dbb 00:0000 10 j 0x00402d2c f 0x00402dbb
0x00402dbb 0x00402dc5 00:0000 10 j 0x00402d2c f 0x00402dc5
0x00402dc5 0x00402de7 00:0000 34 j 0x00403875 f 0x00402de7
0x00402de7 0x00402dfc 00:0000 21 j 0x00403875 f 0x00402dfc
0x00402dfc 0x00402e03 00:0000 7 j 0x00402e12 f 0x00402e03
0x00402e03 0x00402e12 00:0000 15 j 0x00402e14
0x00402e12 0x00402e14 00:0000 2 j 0x00402e14
0x00402e14 0x00402e30 00:0000 28 j 0x00403850 f 0x00402e30
0x00402e30 0x00402e37 00:0000 7 s 0x00403038 s 0x00402e37 s 0x00402e67 s 0x00402ec5 s 0x00402f11 s 0x00402f1c s 0x00402f62 s 0x00403092
0x00402e37 0x00402e67 00:0000 48 j 0x00403850
0x00402e67 0x00402e6f 00:0000 8 j 0x00402eb9 f 0x00402e6f
0x00402e6f 0x00402e74 00:0000 5 j 0x00402eaa f 0x00402e74
0x00402e74 0x00402e79 00:0000 5 j 0x00402e9e f 0x00402e79
0x00402e79 0x00402e7d 00:0000 4 j 0x00402e92 f 0x00402e7d
0x00402e7d 0x00402e86 00:0000 9 j 0x00403850 f 0x00402e86
0x00402e86 0x00402e92 00:0000 12 j 0x00403850
0x00402e92 0x00402e9e 00:0000 12 j 0x00403850
0x00402e9e 0x00402eaa 00:0000 12 j 0x00403850
0x00402eaa 0x00402eb9 00:0000 15 j 0x00403850
0x00402eb9 0x00402ec5 00:0000 12 j 0x00403850
0x00402ec5 0x00402eca 00:0000 5 j 0x00402ef6 f 0x00402eca
0x00402eca 0x00402ee4 00:0000 26 j 0x00403850 f 0x00402ee4
0x00402ee4 0x00402ef6 00:0000 18 j 0x00403850
0x00402ef6 0x00402f11 00:0000 27 j 0x00403850
0x00402f11 0x00402f1c 00:0000 11 j 0x00403850
0x00402f1c 0x00402f21 00:0000 5 j 0x00402f47 f 0x00402f21
0x00402f21 0x00402f3b 00:0000 26 j 0x00403850 f 0x00402f3b
0x00402f3b 0x00402f47 00:0000 12 j 0x00403850
0x00402f47 0x00402f62 00:0000 27 j 0x00403850
0x00402f62 0x00402f67 00:0000 5 j 0x00402fbc f 0x00402f67
0x00402f67 0x00402f6c 00:0000 5 j 0x00402fb0 f 0x00402f6c
0x00402f6c 0x00402f71 00:0000 5 j 0x00402f89 f 0x00402f71
0x00402f71 0x00402f7a 00:0000 9 j 0x00403850 f 0x00402f7a
0x00402f7a 0x00402f89 00:0000 15 j 0x00403850
0x00402f89 0x00402f8e 00:0000 5 j 0x00402fa4 f 0x00402f8e
0x00402f8e 0x00402fa4 00:0000 22 j 0x00403850
0x00402fa4 0x00402fb0 00:0000 12 j 0x00403850
0x00402fb0 0x00402fbc 00:0000 12 j 0x00403850
0x00402fbc 0x00402fc2 00:0000 6 j 0x00402fe0 f 0x00402fc2
0x00402fc2 0x00402fc8 00:0000 6 j 0x00402fe0 f 0x00402fc8
0x00402fc8 0x00402fe0 00:0000 24 j 0x00403850
0x00402fe0 0x00402fe4 00:0000 4 j 0x00403002 f 0x00402fe4
0x00402fe4 0x00402fea 00:0000 6 j 0x00403002 f 0x00402fea
0x00402fea 0x00403002 00:0000 24 j 0x00403850
0x00403002 0x0040300a 00:0000 8 j 0x00403850 f 0x0040300a
0x0040300a 0x00403012 00:0000 8 j 0x00403850 f 0x00403012
0x00403012 0x0040301a 00:0000 8 j 0x00403850 f 0x0040301a
0x0040301a 0x00403022 00:0000 8 j 0x00403850 f 0x00403022
0x00403022 0x0040302a 00:0000 8 j 0x00403850 f 0x0040302a
0x0040302a 0x00403032 00:0000 8 j 0x00403850 f 0x00403032
0x00403032 0x00403038 00:0000 6 j 0x00403038
0x00403038 0x0040305a 00:0000 34 j 0x0040307c f 0x0040305a
0x0040305a 0x0040307c 00:0000 34 j 0x00402d2c f 0x0040307c
0x0040307c 0x00403092 00:0000 22 j 0x00403850
0x00403092 0x0040309e 00:0000 12 j 0x00403254 f 0x0040309e
0x0040309e 0x004030a4 00:0000 6 j 0x004032fc f 0x004030a4
0x004030a4 0x004030ad 00:0000 9 j 0x00403167 f 0x004030ad
0x004030ad 0x004030af 00:0000 2 j 0x004030fb f 0x004030af
0x004030af 0x004030b4 00:0000 5 j 0x004030c4 f 0x004030b4
0x004030b4 0x004030b8 00:0000 4 j 0x004030dc f 0x004030b8
0x004030b8 0x004030bc 00:0000 4 j 0x004030c4 f 0x004030bc
0x004030bc 0x004030c4 00:0000 8 j 0x0040366f f 0x004030c4
0x004030c4 0x004030dc 00:0000 24 j 0x00403332
0x004030dc 0x004030ec 00:0000 16 j 0x0040318a f 0x004030ec
0x004030ec 0x004030fb 00:0000 15 j 0x0040318a
0x004030fb 0x00403107 00:0000 12 j 0x00403111 f 0x00403107
0x00403107 0x00403111 00:0000 10 j 0x00403111
0x00403111 0x0040311c 00:0000 11 j 0x00403121 f 0x0040311c
0x0040311c 0x00403121 00:0000 5 j 0x00403121
0x00403121 0x00403143 00:0000 34 j 0x00403641 f 0x00403143
0x00403143 0x00403147 00:0000 4 j 0x00403152 f 0x00403147
0x00403147 0x00403152 00:0000 11 j 0x00403152
0x00403152 0x00403167 00:0000 21 j 0x00403633
0x00403167 0x00403170 00:0000 9 j 0x00403492 f 0x00403170
0x00403170 0x00403174 00:0000 4 j 0x004031f3 f 0x00403174
0x00403174 0x0040317c 00:0000 8 j 0x00403332 f 0x0040317c
0x0040317c 0x00403184 00:0000 8 j 0x0040366f f 0x00403184
0x00403184 0x0040318a 00:0000 6 j 0x0040318a
0x0040318a 0x0040319f 00:0000 21 j 0x004031cf f 0x0040319f
0x0040319f 0x004031c3 00:0000 36 j 0x004031e2 f 0x004031c3
0x004031c3 0x004031cf 00:0000 12 j 0x004031e2
0x004031cf 0x004031e2 00:0000 19 j 0x004031e2
0x004031e2 0x004031f3 00:0000 17 j 0x0040366f
0x004031f3 0x00403202 00:0000 15 j 0x0040323d f 0x00403202
0x00403202 0x00403209 00:0000 7 j 0x0040323d f 0x00403209
0x00403209 0x0040321e 00:0000 21 j 0x00403232 f 0x0040321e
0x0040321e 0x00403232 00:0000 20 j 0x00403669
0x00403232 0x0040323d 00:0000 11 j 0x00403669
0x0040323d 0x00403249 00:0000 12 j 0x00403249
0x00403249 0x00403254 00:0000 11 j 0x00403669
0x00403254 0x0040325d 00:0000 9 j 0x0040349a f 0x0040325d
0x0040325d 0x00403263 00:0000 6 j 0x00403488 f 0x00403263
0x00403263 0x0040326c 00:0000 9 j 0x0040366f f 0x0040326c
0x0040326c 0x00403275 00:0000 9 j 0x0040332c f 0x00403275
0x00403275 0x0040327a 00:0000 5 j 0x004032f6 f 0x0040327a
0x0040327a 0x0040327f 00:0000 5 j 0x004032ad f 0x0040327f
0x0040327f 0x00403288 00:0000 9 j 0x0040366f f 0x00403288
0x00403288 0x004032a1 00:0000 25 j 0x0040330d f 0x004032a1
0x004032a1 0x004032ad 00:0000 12 j 0x0040330d
0x004032ad 0x004032ca 00:0000 29 j 0x00402d2c f 0x004032ca
0x004032ca 0x004032d3 00:0000 9 j 0x004032df f 0x004032d3
0x004032d3 0x004032df 00:0000 12 j 0x004032e7
0x004032df 0x004032e7 00:0000 8 j 0x004032e7
0x004032e7 0x004032f6 00:0000 15 j 0x00403834
0x004032f6 0x004032fc 00:0000 6 j 0x004032fc
0x004032fc 0x00403303 00:0000 7 j 0x00403303
0x00403303 0x0040330d 00:0000 10 j 0x0040330d
0x0040330d 0x0040331f 00:0000 18 j 0x004034ff f 0x0040331f
0x0040331f 0x0040332c 00:0000 13 j 0x00403538
0x0040332c 0x00403332 00:0000 6 j 0x00403332
0x00403332 0x00403358 00:0000 38 j 0x00403364 f 0x00403358
0x00403358 0x00403364 00:0000 12 j 0x004033ce
0x00403364 0x00403366 00:0000 2 j 0x00403377 f 0x00403366
0x00403366 0x0040336b 00:0000 5 j 0x004033ce f 0x0040336b
0x0040336b 0x00403377 00:0000 12 j 0x004033ce
0x00403377 0x0040337f 00:0000 8 j 0x00403385 f 0x0040337f
0x0040337f 0x00403385 00:0000 6 j 0x00403385
0x00403385 0x00403391 00:0000 12 j 0x004033ce f 0x00403391
0x00403391 0x004033b4 00:0000 35 j 0x004033c4 f 0x004033b4
0x004033b4 0x004033c4 00:0000 16 j 0x004033ce
0x004033c4 0x004033ce 00:0000 10 j 0x004033ce
0x004033ce 0x0040342e 00:0000 96 j 0x0040344b f 0x0040342e
0x0040342e 0x00403437 00:0000 9 j 0x0040344b f 0x00403437
0x00403437 0x0040344b 00:0000 20 j 0x0040344b
0x0040344b 0x00403454 00:0000 9 j 0x0040346c f 0x00403454
0x00403454 0x00403458 00:0000 4 j 0x0040346c f 0x00403458
0x00403458 0x0040346c 00:0000 20 j 0x0040346c
0x0040346c 0x00403471 00:0000 5 j 0x00403482 f 0x00403471
0x00403471 0x00403482 00:0000 17 j 0x00403482
0x00403482 0x00403488 00:0000 6 j 0x00403249
0x00403488 0x00403492 00:0000 10 j 0x00403492
0x00403492 0x0040349a 00:0000 8 j 0x004034c4
0x0040349a 0x004034a3 00:0000 9 j 0x00403111 f 0x004034a3
0x004034a3 0x004034ab 00:0000 8 j 0x00403303 f 0x004034ab
0x004034ab 0x004034b4 00:0000 9 j 0x0040366f f 0x004034b4
0x004034b4 0x004034c4 00:0000 16 j 0x004034c4
0x004034c4 0x004034db 00:0000 23 j 0x0040330d f 0x004034db
0x004034db 0x004034ff 00:0000 36 j 0x0040330d
0x004034ff 0x0040350b 00:0000 12 j 0x0040331f f 0x0040350b
0x0040350b 0x00403513 00:0000 8 j 0x0040352b f 0x00403513
0x00403513 0x0040351e 00:0000 11 j 0x00403524 f 0x0040351e
0x0040351e 0x00403524 00:0000 6 j 0x00403528
0x00403524 0x00403528 00:0000 4 j 0x00403528
0x00403528 0x0040352b 00:0000 3 j 0x0040353e
0x0040352b 0x00403533 00:0000 8 j 0x00403536 f 0x00403533
0x00403533 0x00403536 00:0000 3 j 0x00403538
0x00403536 0x00403538 00:0000 2 j 0x00403538
0x00403538 0x0040353e 00:0000 6 j 0x0040353e
0x0040353e 0x00403543 00:0000 5 j 0x0040355d f 0x00403543
0x00403543 0x00403547 00:0000 4 j 0x0040355d f 0x00403547
0x00403547 0x00403549 00:0000 2 j 0x0040354d f 0x00403549
0x00403549 0x0040354d 00:0000 4 j 0x0040355d f 0x0040354d
0x0040354d 0x0040355d 00:0000 16 j 0x0040355d
0x0040355d 0x0040356d 00:0000 16 j 0x0040356f f 0x0040356d
0x0040356d 0x0040356f 00:0000 2 j 0x0040356f
0x0040356f 0x00403577 00:0000 8 j 0x00403583 f 0x00403577
0x00403577 0x00403583 00:0000 12 j 0x0040359d
0x00403583 0x00403597 00:0000 20 j 0x0040359d f 0x00403597
0x00403597 0x0040359d 00:0000 6 j 0x0040359d
0x0040359d 0x004035a3 00:0000 6 j 0x004035a9 f 0x004035a3
0x004035a3 0x004035a9 00:0000 6 j 0x004035a9
0x004035a9 0x004035ac 00:0000 3 j 0x004035ac
0x004035ac 0x004035bc 00:0000 16 j 0x004035c2 f 0x004035bc
0x004035bc 0x004035c2 00:0000 6 j 0x004035ef f 0x004035c2
0x004035c2 0x004035e4 00:0000 34 j 0x004035ea f 0x004035e4
0x004035e4 0x004035ea 00:0000 6 j 0x004035ea
0x004035ea 0x004035ef 00:0000 5 j 0x004035ac
0x004035ef 0x0040360d 00:0000 30 j 0x0040366f f 0x0040360d
0x0040360d 0x00403611 00:0000 4 j 0x00403618 f 0x00403611
0x00403611 0x00403618 00:0000 7 j 0x0040366f f 0x00403618
0x00403618 0x0040362a 00:0000 18 j 0x00403669
0x0040362a 0x00403630 00:0000 6 j 0x00403637 f 0x00403630
0x00403630 0x00403633 00:0000 3 j 0x00403633
0x00403633 0x00403637 00:0000 4 j 0x0040362a f 0x00403637
0x00403637 0x00403641 00:0000 10 j 0x00403669
0x00403641 0x00403645 00:0000 4 j 0x00403650 f 0x00403645
0x00403645 0x00403650 00:0000 11 j 0x00403650
0x00403650 0x00403658 00:0000 8 j 0x0040365f
0x00403658 0x0040365e 00:0000 6 j 0x00403663 f 0x0040365e
0x0040365e 0x0040365f 00:0000 1 j 0x0040365f
0x0040365f 0x00403663 00:0000 4 j 0x00403658 f 0x00403663
0x00403663 0x00403669 00:0000 6 j 0x00403669
0x00403669 0x0040366f 00:0000 6 j 0x0040366f
0x0040366f 0x0040367c 00:0000 13 j 0x00403834 f 0x0040367c
0x0040367c 0x00403687 00:0000 11 j 0x004036bc f 0x00403687
0x00403687 0x0040368f 00:0000 8 j 0x00403698 f 0x0040368f
0x0040368f 0x00403698 00:0000 9 j 0x004036b2
0x00403698 0x0040369d 00:0000 5 j 0x004036a6 f 0x0040369d
0x0040369d 0x004036a6 00:0000 9 j 0x004036b2
0x004036a6 0x004036ab 00:0000 5 j 0x004036bc f 0x004036ab
0x004036ab 0x004036b2 00:0000 7 j 0x004036b2
0x004036b2 0x004036bc 00:0000 10 j 0x004036bc
0x004036bc 0x004036d9 00:0000 29 j 0x004036fe f 0x004036d9
0x004036d9 0x004036dd 00:0000 4 j 0x004036fa
0x004036dd 0x004036fa 00:0000 29 j 0x004036fe f 0x004036fa
0x004036fa 0x004036fe 00:0000 4 j 0x004036dd f 0x004036fe
0x004036fe 0x0040372d 00:0000 47 j 0x0040375b f 0x0040372d
0x0040372d 0x00403736 00:0000 9 j 0x0040375b f 0x00403736
0x00403736 0x0040373e 00:0000 8 j 0x00403757
0x0040373e 0x00403757 00:0000 25 j 0x0040375b f 0x00403757
0x00403757 0x0040375b 00:0000 4 j 0x0040373e f 0x0040375b
0x0040375b 0x0040376a 00:0000 15 j 0x004037df f 0x0040376a
0x0040376a 0x0040376e 00:0000 4 j 0x004037df f 0x0040376e
0x0040376e 0x0040377a 00:0000 12 j 0x0040377a
0x0040377a 0x004037a0 00:0000 38 j 0x004037d6 f 0x004037a0
0x004037a0 0x004037a8 00:0000 8 j 0x004037d6 f 0x004037a8
0x004037a8 0x004037d4 00:0000 44 j 0x0040377a f 0x004037d4
0x004037d4 0x004037d6 00:0000 2 j 0x004037f9
0x004037d6 0x004037df 00:0000 9 j 0x004037f9
0x004037df 0x004037f9 00:0000 26 j 0x004037f9
0x004037f9 0x00403802 00:0000 9 j 0x00403834 f 0x00403802
0x00403802 0x0040380b 00:0000 9 j 0x00403834 f 0x0040380b
0x0040380b 0x00403813 00:0000 8 j 0x00403830
0x00403813 0x00403830 00:0000 29 j 0x00403834 f 0x00403830
0x00403830 0x00403834 00:0000 4 j 0x00403813 f 0x00403834
0x00403834 0x0040383d 00:0000 9 j 0x00403850 f 0x0040383d
0x0040383d 0x00403850 00:0000 19 j 0x00403850
0x00403850 0x00403862 00:0000 18 j 0x00403875 f 0x00403862
0x00403862 0x00403875 00:0000 19 j 0x00402de7
0x00403875 0x0040387e 00:0000 9 j 0x00403888 f 0x0040387e
0x0040387e 0x00403888 00:0000 10 j 0x00403888
0x00403888 0x0040388e 00:0000 6 j 0x0040388e
0x0040388e 0x0040389d 00:0000 15
EOF
RUN


NAME=mac-ls switch count4
FILE=bins/pe/ConsoleApplication1.exe
CMDS=<<EOF
e anal.jmp.tbl=true
s 0x401090
af
afb
EOF
EXPECT=<<EOF
0x00401090 0x004010d2 00:0000 66 j 0x004010e8 f 0x004010d2
0x004010d2 0x004010e8 00:0000 22
0x004010e8 0x00401103 00:0000 27 j 0x00401103
0x00401103 0x0040110e 00:0000 11 j 0x0040116b f 0x0040110e
0x0040110e 0x00401115 00:0000 7 j 0x0040114f f 0x00401115
0x00401115 0x00401119 00:0000 4 j 0x00401123 f 0x00401119
0x00401119 0x00401123 00:0000 10 j 0x00401123
0x00401123 0x00401138 00:0000 21 j 0x00401103 f 0x00401138
0x00401138 0x0040114f 00:0000 23
0x0040114f 0x0040116b 00:0000 28
0x0040116b 0x00401173 00:0000 8 j 0x004011e5 f 0x00401173
0x00401173 0x00401182 00:0000 15 j 0x00401182
0x00401182 0x0040118a 00:0000 8 j 0x004011c8 f 0x0040118a
0x0040118a 0x00401191 00:0000 7 s 0x00401196 s 0x00401191 s 0x004011a6 s 0x004011c3
0x00401191 0x00401196 00:0000 5 j 0x004011d8
0x00401196 0x004011a6 00:0000 16 j 0x004011d8
0x004011a6 0x004011ac 00:0000 6 j 0x004011b1 f 0x004011ac
0x004011ac 0x004011b1 00:0000 5 j 0x004011d8
0x004011b1 0x004011b5 00:0000 4 j 0x004011ba f 0x004011b5
0x004011b5 0x004011ba 00:0000 5 j 0x004011d8
0x004011ba 0x004011be 00:0000 4 j 0x004011d8 f 0x004011be
0x004011be 0x004011c3 00:0000 5 j 0x004011d8
0x004011c3 0x004011c8 00:0000 5 j 0x004011d8
0x004011c8 0x004011d8 00:0000 16 j 0x004011d8
0x004011d8 0x004011e2 00:0000 10 j 0x00401182 f 0x004011e2
0x004011e2 0x004011e5 00:0000 3 j 0x004011e5
0x004011e5 0x00401249 00:0000 100
EOF
RUN

NAME=ls_amd64 all switches
FILE=bins/jmptbl/ls_amd64
CMDS=<<EOF
aaa
CC. @@ switch
EOF
EXPECT=<<EOF
switch table (275 cases) at 0x4140b0
switch table (121 cases) at 0x413cc0
switch table (5 cases) at 0x414088
switch table (11 cases) at 0x418e00
switch table (127 cases) at 0x418e58
switch table (123 cases) at 0x419318
switch table (123 cases) at 0x4196f0
switch table (10 cases) at 0x419dc0
switch table (54 cases) at 0x419e98
switch table (54 cases) at 0x41a048
switch table (54 cases) at 0x41a268
switch table (54 cases) at 0x41a418
EOF
RUN



NAME=clang_3.8_32 switch/case flags
FILE=bins/jmptbl/test_clang_3.8_32.out
CMDS=<<EOF
aaa
f~switch
f~case.
EOF
EXPECT=<<EOF
0x080483fd 1 switch.0x080483fd
0x08048404 1 case.0x80483fd.2
0x08048404 1 case.0x80483fd.3
0x08048404 1 case.0x80483fd.4
0x0804840d 1 case.0x80483fd.1
0x08048416 1 case.0x80483fd.5
0x0804841f 1 case.0x80483fd.6
0x08048428 1 case.0x80483fd.7
0x08048431 1 case.0x80483fd.8
0x08048431 1 case.0x80483fd.10
0x08048431 1 case.default.0x80483fd
0x0804843a 1 case.0x80483fd.9
0x08048443 1 case.0x80483fd.11
0x0804844c 1 case.0x80483fd.12
0x08048455 1 case.0x80483fd.13
EOF
RUN


NAME=clang_5.0_32 switch/case flags
FILE=bins/jmptbl/test_clang_5.0_32.out
CMDS=<<EOF
aaa
f~switch
f~case.
EOF
EXPECT=<<EOF
0x080483fd 1 switch.0x080483fd
0x08048404 1 case.0x80483fd.2
0x08048404 1 case.0x80483fd.3
0x08048404 1 case.0x80483fd.4
0x0804840d 1 case.0x80483fd.1
0x08048416 1 case.0x80483fd.5
0x0804841f 1 case.0x80483fd.6
0x08048428 1 case.0x80483fd.7
0x08048431 1 case.0x80483fd.8
0x08048431 1 case.0x80483fd.10
0x08048431 1 case.default.0x80483fd
0x0804843a 1 case.0x80483fd.9
0x08048443 1 case.0x80483fd.11
0x0804844c 1 case.0x80483fd.12
0x08048455 1 case.0x80483fd.13
EOF
RUN


NAME=msvc_1900_32 switch/case flags
FILE=bins/jmptbl/test_msvc_1900_32.exe
CMDS=<<EOF
aaa
f~switch
f~case.
EOF
EXPECT=<<EOF
0x0040100e 1 switch.0x0040100e
0x0040be85 1 switch.0x0040be85
0x0040beb5 1 switch.0x0040beb5
0x0040bf68 1 switch.0x0040bf68
0x00401015 1 case.0x40100e.1
0x00401025 1 case.0x40100e.2
0x00401025 1 case.0x40100e.3
0x00401025 1 case.0x40100e.4
0x00401035 1 case.0x40100e.5
0x00401045 1 case.0x40100e.6
0x00401055 1 case.0x40100e.7
0x00401065 1 case.0x40100e.9
0x00401075 1 case.0x40100e.11
0x00401085 1 case.0x40100e.12
0x00401095 1 case.0x40100e.13
0x004010a5 1 case.0x40100e.8
0x004010a5 1 case.0x40100e.10
0x004010a5 1 case.default.0x40100e
0x0040be7e 1 case.default.0x40be85
0x0040bed4 1 case.0x40beb5.0
0x0040bed4 1 case.0x40be85.0
0x0040bedc 1 case.0x40beb5.1
0x0040bedc 1 case.0x40be85.1
0x0040bee8 1 case.0x40beb5.2
0x0040bee8 1 case.0x40be85.2
0x0040befc 1 case.0x40beb5.3
0x0040befc 1 case.0x40be85.3
0x0040bf80 1 case.0x40bf68.0
0x0040bf88 1 case.0x40bf68.1
0x0040bf98 1 case.0x40bf68.2
0x0040bfac 1 case.0x40bf68.3
0x0040c074 1 case.default.0x40bf68
0x0040c15b 1 case.default.0x40beb5
EOF
RUN


NAME=msvc_1913_32 switch/case flags
FILE=bins/jmptbl/test_msvc_1913_32.exe
CMDS=<<EOF
aaa
f~switch
f~case.
EOF
EXPECT=<<EOF
0x0040100e 1 switch.0x0040100e
0x00402875 1 switch.0x00402875
0x004028a5 1 switch.0x004028a5
0x00402958 1 switch.0x00402958
0x00401015 1 case.0x40100e.1
0x00401026 1 case.0x40100e.2
0x00401026 1 case.0x40100e.3
0x00401026 1 case.0x40100e.4
0x00401037 1 case.0x40100e.5
0x00401048 1 case.0x40100e.6
0x00401059 1 case.0x40100e.7
0x0040106a 1 case.0x40100e.9
0x0040107b 1 case.0x40100e.11
0x0040108c 1 case.0x40100e.12
0x0040109d 1 case.0x40100e.13
0x004010ae 1 case.0x40100e.8
0x004010ae 1 case.0x40100e.10
0x004010ae 1 case.default.0x40100e
0x0040286e 1 case.default.0x402875
0x004028c4 1 case.0x4028a5.0
0x004028c4 1 case.0x402875.0
0x004028cc 1 case.0x4028a5.1
0x004028cc 1 case.0x402875.1
0x004028d8 1 case.0x4028a5.2
0x004028d8 1 case.0x402875.2
0x004028ec 1 case.0x4028a5.3
0x004028ec 1 case.0x402875.3
0x00402970 1 case.0x402958.0
0x00402978 1 case.0x402958.1
0x00402988 1 case.0x402958.2
0x0040299c 1 case.0x402958.3
0x00402a64 1 case.default.0x402958
0x00402b4b 1 case.default.0x4028a5
EOF
RUN

NAME=cmu_binary_bomb switch case detection
FILE=bins/jmptbl/cmu_binary_bomb
CMDS=<<EOF
aa
f~switch
f~case
EOF
EXPECT=<<EOF
0x08048bd6 1 switch.0x08048bd6
0x08048be0 1 case.0x8048bd6.0
0x08048c00 1 case.0x8048bd6.1
0x08048c16 1 case.0x8048bd6.2
0x08048c28 1 case.0x8048bd6.3
0x08048c40 1 case.0x8048bd6.4
0x08048c52 1 case.0x8048bd6.5
0x08048c64 1 case.0x8048bd6.6
0x08048c76 1 case.0x8048bd6.7
0x08048c88 1 case.default.0x8048bd6
EOF
RUN

NAME=./nojmpabove
FILE=bins/pe/test.exe
CMDS=<<EOF
e anal.jmp.above=false
af
afb
EOF
EXPECT=<<EOF
0x0040132b 0x00401335 00:0000 10
EOF
RUN


NAME=./searchstringrefs
FILE=bins/pe/test.exe
CMDS=<<EOF
e anal.refstr=true
s 0x401000
af
afx
EOF
EXPECT=<<EOF
d 0x00401006 -> 0x0040d004 mov eax, dword [0x40d004]
s 0x00401010 -> 0x0040b9a0 0x6c6c6568  hell @ str.hello_n ascii ('h')
C 0x00401015 -> 0x004010e4 call fcn.004010e4
d 0x0040101e -> 0x0040b9a8 push 0x40b9a8
C 0x00401023 -> 0x004010c7 call fcn.004010c7
C 0x00401032 -> 0x0040103b call fcn.0040103b
EOF
RUN

NAME=sar on x86-32
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
# testing mov eax, -4 sar
# 64bit code seems to fail
# wx 48c7c0fcffffff 48d1f8 48d1f8 48d1f8 48d1f8 48d1f8 48d1f8
wx b8fcffffff d1f8 d1f8 d1f8 d1f8 d1f8 d1f8
aes
dr?eax
aes
dr?eax
aes
dr?eax
aes
dr?eax
aes
dr?eax
EOF
EXPECT=<<EOF
0xfffffffc
0xfffffffe
0xffffffff
0xffffffff
0xffffffff
EOF
RUN

NAME=int 0x80 doesn t terminate a function
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 5589d8b900000000b885000000cd8089c35dc3
af
afi~size
EOF
EXPECT=<<EOF
size: 19
EOF
RUN

NAME=mnemonic - repe/cmpsb
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=64
a8 f3a6~mnemonic[1]
EOF
EXPECT=<<EOF
cmpsb
EOF
RUN

NAME=ao 4~bytes
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 554889e5415741564155
ao 3~bytes
EOF
EXPECT=<<EOF
bytes: 55
bytes: 48
bytes: 89e5
EOF
RUN

NAME=af fwd-jmp
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx 558bec6800304000e86300000083c404eb0d6808304000e85400000083c4046814304000e84700000083c40433c05dc3
af
afb
EOF
EXPECT=<<EOF
0x00000000 0x00000012 00:0000 18 j 0x0000001f
0x0000001f 0x00000030 00:0000 17
EOF
RUN

NAME=af fwd-jmp 2
FILE=bins/elf/license_1.out
CMDS=<<EOF
af @ main
afb @ main~?
EOF
EXPECT=<<EOF
9
EOF
RUN

NAME=./x86_32_cs
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
b 0x4e
wx 743684c0741284d2b8010000007509f3c30f1f8000000000488b4e40488b07488b1648394f407f187c1e4889d64889c7e933e1ffff0f1f0084d274c60f1f4000b8ffffffffc36690b801000000c3
af
pif~?
afi $$~size[1]
EOF
EXPECT=<<EOF
32
78
EOF
RUN

NAME=./x86_32_cs2
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
b 0x4e
wx 743684c0741284d2b8010000007509f3c30f1f8000000000488b4e40488b07488b1648394f407f187c1e4889d64889c7e933e1ffff0f1f0084d274c60f1f4000b8ffffffffc36690b801000000c3
af
# count basic blocks
pdr~true?
EOF
EXPECT=<<EOF
7
EOF
RUN

NAME=./x86_32_cs3
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
b 0x4e
wx 5589e583ec2083f8000f8507000000b800000000eb05b80100000083c4205dc3
af
# count basic blocks
pdr~true?
pdr~false?
EOF
EXPECT=<<EOF
3
1
EOF
RUN

NAME=./x86_win
FILE=bins/pe/standard.exe
CMDS=<<EOF
aaa
afi @ fcn.00402b2d~name
EOF
EXPECT=<<EOF
name: fcn.00402b2d
EOF
RUN

NAME=./x86_win2
FILE=bins/pe/ioli/w32/crackme0x00.exe
CMDS=<<EOF
aaa
pd 1 @ sym.imp.msvcrt.dll_strlen~?dword
EOF
EXPECT=<<EOF
1
EOF
RUN

NAME=./x86_win3
FILE=bins/pe/testx64.exe
CMDS=<<EOF
aaa
pd 1 @ sym.imp.VCRUNTIME140.dll_memset~?qword
EOF
EXPECT=<<EOF
1
EOF
RUN

NAME=./x86_win4
FILE=bins/pe/96workingsections.exe
CMDS=<<EOF
aaa
afb @ sym.imp.kernel32.dll_ExitProcess
EOF
EXPECT=<<EOF
EOF
RUN

NAME=xref aar on op.val
FILE=bins/elf/analysis/ch2.bin
CMDS=<<EOF
af@main
aar
axt @ str.john
EOF
EXPECT=<<EOF
main 0x804831a [DATA:r--] mov dword [var_ch], str.john
EOF
RUN

NAME=resolve reloc symbols 1
FILE=bins/elf/libc.so.6
CMDS=<<EOF
s 0x0003a4af
pd 1
EOF
EXPECT=<<EOF
            0x0003a4af      ff15f33a1800   call qword [reloc.free]     ; [0x1bdfa8:8]=0
EOF
RUN

NAME=resolve reloc symbols 2
FILE=bins/elf/libc.so.6
CMDS=ir~0x[4]
EXPECT=<<EOF
0x001bf3c0
_res
0x00023a90
0x00023af0
0x0016ba40
0x0016bab0
0x0016bae0
0x0016bb40
0x0016bda0
0x0016bfa0
0x0016bfd0
0x0016c020
0x0016c090
0x00090c50
0x0016c1c0
0x0016c210
0x0016c220
0x0016c2a0
0x000f74d0
0x0016c2c0
0x0016c380
0x0016c3c0
0x0011d0d0
0x0016c3f0
0x0016c490
0x0016c460
0x0016c510
0x0012c520
0x0016c530
0x0016c560
0x0016c590
0x0016c5c0
0x0016c5f0
0x0016c6b0
0x0007f800
0x0007f310
0x0004def0
0x0007ec30
0x0007ec40
0x0007ffd0
0x0007eca0
0x0007ee20
0x0007f390
0x0007f010
0x0007eee0
0x0007f300
0x0007f080
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00075210
0x00059a60
0x0007ec30
0x0007ec40
0x00075050
0x00075380
0x000758e0
0x0007f390
0x0007f010
0x0007eee0
0x0007f300
0x000754f0
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x0007d230
0x0007dcb0
0x0007d9f0
0x0007ec40
0x0007ffd0
0x0007ce20
0x0007ee20
0x000713b0
0x0007f010
0x0007bab0
0x0007b9b0
0x00070700
0x00071290
0x000712c0
0x00071310
0x00071370
0x00080130
0x00080160
0x00080170
0x0007d230
0x0007dcb0
0x0007d9f0
0x0007ec40
0x0007ffd0
0x0007ce20
0x0007ee20
0x0007c230
0x0007f010
0x0007bab0
0x0007b9b0
0x00070700
0x0007ce00
0x0007c830
0x0007bf60
0x000723f0
0x0007c810
0x00080160
0x00080170
0x00076130
0x00074990
0x00075cc0
0x000752a0
0x00076110
0x00075380
0x000758e0
0x00076250
0x0007f010
0x0007eee0
0x0007f300
0x000754f0
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00080160
0x00080170
0x00076130
0x00075d20
0x00075cc0
0x000752a0
0x00076110
0x00075380
0x000758e0
0x00076250
0x0007f010
0x0007eee0
0x0007f300
0x000754f0
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00080160
0x00080170
0x0007d230
0x000778d0
0x00077540
0x000752a0
0x00075050
0x00077d30
0x0007c9e0
0x00076c90
0x0007f010
0x0007baf0
0x00077b90
0x00071aa0
0x0007ce00
0x0007c830
0x0007bf60
0x0007baa0
0x0007c810
0x00080160
0x00080170
0x0007d230
0x000778d0
0x00077580
0x000752a0
0x00075050
0x00077d30
0x0007c9e0
0x00076c90
0x0007f010
0x0007baf0
0x00077b90
0x00071aa0
0x0007ce00
0x0007c830
0x0007bf60
0x0007bcc0
0x0007c810
0x00080160
0x00080170
0x0007d230
0x000778d0
0x00076640
0x000752a0
0x00075050
0x00077d30
0x0007c9e0
0x00076c90
0x0007f010
0x0007bab0
0x00077b90
0x00071aa0
0x0007ce00
0x0007c830
0x0007bf60
0x0007baa0
0x0007c810
0x00080160
0x00080170
0x000786c0
0x00075d20
0x00075cc0
0x000752a0
0x00076110
0x00075380
0x000758e0
0x00076250
0x0007f010
0x0007eee0
0x00078660
0x000754f0
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00080160
0x00080170
0x000792d0
0x00080300
0x000802a0
0x0007ec40
0x00080660
0x0007eca0
0x0007ee20
0x000807d0
0x0007f010
0x0007eee0
0x00079280
0x0007f080
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00080160
0x00080170
0x00080680
0x000799c0
0x000802a0
0x0007ec40
0x00080660
0x0007eca0
0x0007ee20
0x000807d0
0x0007f010
0x0007eee0
0x0007f300
0x0007f080
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00080160
0x00080170
0x00079bf0
0x00079b20
0x0007d230
0x0007dcb0
0x0007c170
0x0007ec40
0x0007ffd0
0x0007ce20
0x0007c1c0
0x0007b940
0x0007f010
0x0007baf0
0x0007b9b0
0x00070700
0x0007ce00
0x0007c830
0x0007bf60
0x0007baa0
0x0007c810
0x00080160
0x00080170
0x0007d230
0x0007dcb0
0x0007cd70
0x0007ec40
0x0007ffd0
0x0007ce20
0x0007c8d0
0x0007cc40
0x0007f010
0x0007baf0
0x0007bf70
0x00070700
0x0007ce00
0x0007c830
0x0007bf60
0x0007bcc0
0x0007c810
0x00080160
0x00080170
0x0007d230
0x0007dcb0
0x0007d9f0
0x0007ec40
0x0007ffd0
0x0007ce20
0x0007c9e0
0x0007c230
0x0007f010
0x0007bab0
0x0007b9b0
0x00070700
0x0007ce00
0x0007c830
0x0007bf60
0x0007baa0
0x0007c810
0x00080160
0x00080170
0x00080680
0x00080300
0x000802a0
0x0007ec40
0x00080660
0x0007eca0
0x0007ee20
0x000807d0
0x0007f010
0x0007eee0
0x0007f300
0x0007f080
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00080160
0x00080170
0x00080680
0x0010aa10
0x000802a0
0x0007ec40
0x00080660
0x0007eca0
0x0007ee20
0x000807d0
0x0007f010
0x0007eee0
0x0007f300
0x0007f080
0x00080140
0x00080150
0x00080120
0x0007f300
0x00080130
0x00080160
0x00080170
0x001bb340
0x0016d9e0
0x0016d900
0x0016d680
0x0016db40
0x0016d920
0x0016d650
0x0016d640
0x0016d620
0x0016d5e0
0x0016d650
0x0018c7c0
0x0016d5a0
0x00186007
0x0016f2e0
0x0016e8e0
0x0016e2e0
0x0016eee0
0x0016dc20
0x0016dc6a
0x0016dc80
0x00187ea8
0x0016eae0
0x0016e4e0
0x00185ee7
0x001858ec
0x0018590a
0x00185591
0x001840be
0x001841f6
0x00183e10
0x001841f8
0x00185c3d
0x001841fa
0x0018c860
0x0018cb0c
0x0018c868
0x0018c870
0x0018c878
0x0018c880
0x0018c888
0x0018c890
0x0018c898
0x0018c8a0
0x00185ee7
0x001858ec
0x0018590a
0x00185591
0x001840be
0x001841f6
0x00183e10
0x001841f8
0x00185c3d
0x001841fa
0x00178080
0x00175620
0x001740e0
0x0016f5e0
0x0018cb64
0x0016e2a0
0x0016e240
0x0016e1e0
0x0016e180
0x0016e120
0x0016e0c0
0x0016e060
0x0016e000
0x0016dfa0
0x0016df40
0x0016dee0
0x0016de80
0x0016dda0
0x0016dce0
0x00186007
0x001841fc
0x00184202
0x0018431f
0x0018431f
0x00187ea8
0x00186007
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00185cdd
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x0018431f
0x0018431f
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x00184208
0x0018c7c8
0x00187ea8
0x00186007
0x00185e71
0x0018431f
0x0018431f
0x00187ea8
0x00186007
0x0018420a
0x0018420e
0x00184212
0x00184216
0x0018421a
0x0018421e
0x00184222
0x00184226
0x0018422d
0x00184234
0x0018423c
0x00184246
0x0018424f
0x00184256
0x0018425f
0x00184263
0x00184267
0x0018426b
0x0018426f
0x00184273
0x00184277
0x0018427b
0x0018427f
0x00184283
0x00184287
0x0018428b
0x0018428f
0x00184297
0x001842a0
0x001842a6
0x0018426f
0x001842ac
0x001842b1
0x001842b6
0x001842bd
0x001842c7
0x001842cf
0x001842d8
0x001842e1
0x001842e4
0x001842e7
0x001842fc
0x00184305
0x0018430e
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018c8a8
0x0018c8b8
0x0018c8c8
0x0018c8d8
0x0018c8e8
0x0018c8f8
0x0018c908
0x0018c918
0x0018c934
0x0018cb90
0x0018cbb0
0x0018cbd8
0x0018c950
0x0018cc00
0x0018c96c
0x0018c97c
0x0018c98c
0x0018c99c
0x0018c9ac
0x0018c9bc
0x0018c9cc
0x0018c9dc
0x0018c9ec
0x0018c9fc
0x0018ca0c
0x0018ca1c
0x0018cc28
0x0018cc48
0x0018ca2c
0x0018ca44
0x0018c9ac
0x0018ca5c
0x0018ca70
0x0018ca84
0x0018cc70
0x0018cc98
0x0018ccb8
0x0018cce0
0x0018caa0
0x0018caac
0x0018cd08
0x0018cd60
0x0018cd88
0x0018cdb0
0x0018cb8c
0x0018cb8c
0x0018cb8c
0x0018cb8c
0x0018cb8c
0x0018431a
0x0018431c
0x0018431e
0x00184320
0x0018431e
0x0018431f
0x00184322
0x0018cde0
0x00187ea8
0x0018428f
0x00184297
0x001842a0
0x001842a6
0x0018426f
0x001842ac
0x001842b1
0x001842b6
0x001842bd
0x001842c7
0x001842cf
0x001842d8
0x0018cc28
0x0018cc48
0x0018ca2c
0x0018ca44
0x0018c9ac
0x0018ca5c
0x0018ca70
0x0018ca84
0x0018cc70
0x0018cc98
0x0018ccb8
0x0018cce0
0x0018425f
0x00184263
0x00184267
0x0018426b
0x0018426f
0x00184273
0x00184277
0x0018427b
0x0018427f
0x00184283
0x00184287
0x0018428b
0x0018c96c
0x0018c97c
0x0018c98c
0x0018c99c
0x0018c9ac
0x0018c9bc
0x0018c9cc
0x0018c9dc
0x0018c9ec
0x0018c9fc
0x0018ca0c
0x0018ca1c
0x00186007
0x00187ea8
0x00186007
0x0018433a
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x00187ea8
0x00186007
0x00187e08
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x0018431f
0x00187ea8
0x00186007
0x00184349
0x0018431f
0x0018431f
0x0018431f
0x00187ea8
0x00186007
0x0018431e
0x00187ea8
0x00186007
0x00184353
0x00187e38
0x00187e68
0x0018436f
0x0018437d
0x0018438b
0x00184399
0x0018431f
0x001843a7
0x0018431f
0x0018431f
0x0018431f
0x001843ab
0x001843af
0x001795a8
0x00187ea8
0x00186007
0x00179a80
0x00179660
0x00187ea8
0x0017a020
0x0017a000
0x0018456b
0x001bc340
0x00184570
0x001bc360
0x00184578
0x001bc380
0x0018457e
0x001bc3a0
0x0018431f
0x00184751
0x00184759
0x00184771
0x0018478b
0x0018479b
0x001847b3
0x001847c6
0x001847e0
0x001847f7
0x00184809
0x0018481d
0x00188610
0x00184830
0x00184847
0x00184859
0x00184865
0x0018487b
0x00184893
0x0018489f
0x001848b9
0x001848c8
0x001848d8
0x001848e7
0x001848f8
0x00184916
0x00188638
0x0018492a
0x00184939
0x00184948
0x00184960
0x0018496d
0x00184983
0x00184992
0x00188658
0x0018499e
0x001849bc
0x001849d6
0x001849e9
0x001849fc
0x00184a15
0x00188680
0x00184a29
0x00184a44
0x00184a57
0x00184a73
0x00184a8c
0x00184a9b
0x00184aa9
0x00184ac2
0x00184adf
0x00184afa
0x00184b09
0x00184b1a
0x00184b35
0x00184b43
0x00184b4c
0x00184b61
0x00184b6e
0x00184b83
0x00184b97
0x00184ba9
0x00184bb7
0x00184bd0
0x00184bee
0x00184c04
0x00184c15
0x00184c2b
0x00184c3b
0x00184c49
0x00184c65
0x00184c74
0x00184c87
0x00184c9a
0x001886a8
0x00184ca6
0x00184cc1
0x00184cde
0x001886d0
0x001886f8
0x00188720
0x00188740
0x00188770
0x00188798
0x001887d0
0x00184cf5
0x00184d08
0x00188800
0x00184d17
0x00184d34
0x00188820
0x00184d45
0x00184d5c
0x00184d73
0x00184d8d
0x00184da5
0x00188840
0x00184dc3
0x00188870
0x00184dda
0x00184dea
0x00188890
0x001888b8
0x00184e01
0x00184e1a
0x001888e0
0x00188908
0x00188930
0x00188960
0x00184e34
0x00184e49
0x00184e5c
0x00184e69
0x00184e7a
0x00184e98
0x00184eb2
0x00184ec4
0x00184edd
0x00184ef9
0x00184f17
0x00184f2c
0x00184f3d
0x00184f51
0x00184f61
0x00184f73
0x00184f86
0x00184fa1
0x00184fb1
0x00184fc6
0x00184fe2
0x00184fed
0x00188988
0x001889b0
0x00185003
0x0018500a
0x00185014
0x00185019
0x0018502d
0x00185043
0x0018504b
0x00185055
0x0018506e
0x00185075
0x0018508b
0x0018509e
0x00184992
0x001850b4
0x001850c0
0x001850cb
0x001850d7
0x001850e4
0x001850ee
0x001850ff
0x00185107
0x0018511b
0x00185130
0x00185145
0x0018515d
0x00185176
0x0018518c
0x001851a4
0x001851b3
0x001851c0
0x001851ce
0x001851de
0x001851e2
0x001851e6
0x001851fe
0x001851eb
0x001851f0
0x001851f5
0x001851f9
0x001851fd
0x00185202
0x00185207
0x0018520c
0x00185211
0x00185250
0x00185216
0x0018521b
0x00185222
0x00185227
0x0018522c
0x00185231
0x00185236
0x0018523b
0x00185240
0x00185244
0x00185249
0x0018524e
0x00185255
0x0018525a
0x00185260
0x00185265
0x00185269
0x00078110
0x00078020
0x00077f20
0x00077ed0
0x00077f00
0x00078220
0x00077f10
0x001bd940
0x001bd8c0
0x001bcd60
0x00107900
0x001843ba
0x00186f22
0x00186f14
0x001bce00
0x001074a0
0x001843ba
0x00186e98
0x00186f2a
0x00186f3e
0x00186f44
0x00186f5f
0x00186f6c
0x00186f71
0x00186f86
0x00186f8b
0x0018ab28
0x001874ea
0x00187506
0x00187513
0x0018752c
0x0018af20
0x001c2a18
0x001c2a10
0x001c2a08
0x001c2a00
0x001c29f8
0x001c29f0
0x001c29e8
0x001c29e0
0x001c29d8
0x001c29d0
0x001c29c8
0x001c29c0
0x001c29b8
0x001c29b0
0x00120f10
0x00120ee0
0x00120f20
0x00120f30
0x00121010
0x00121400
0x00121380
0x00121370
0x001213b0
0x001213a0
0x00121390
0x00122b60
0x00122aa0
0x00123580
0x00123450
0x001234c0
0x00123510
0x00123470
0x00123460
0x00124250
0x001240a0
0x00123f40
0x00124110
0x00123d10
0x00123d80
0x00123c00
0x00123cf0
0x001241b0
0x00124030
0x00127440
0x00127260
0x00127210
0x00127230
0x00127270
0x001272d0
0x00127fc0
0x00127e20
0x00023a70
0x00023a70
0x00023a70
0x00127e70
0x00128110
0x001280e0
0x00127e30
0x001280a0
0x00127e50
0x00127e70
0x001287f0
0x00128900
0x00128840
0x00128b30
0x00128800
0x00128ff0
0x00129000
0x00129290
0x00129160
0x00129030
0x00129f30
0x00129da0
0x00129d60
0x00129d80
0x00129db0
0x00129e10
0x0012a8c0
0x0012a6f0
0x0012a6b0
0x0012a6d0
0x0012a860
0x0012a700
0x0012d4e0
0x0012d340
0x00023a84
0x00023a84
0x00023a84
0x0012d390
0x0012d600
0x0012d5d0
0x0012d350
0x0012d590
0x0012d370
0x0012d390
0x0012dab0
0x0012da00
0x0012da10
0x0012ddd0
0x0012da30
0x0012da50
0x0012fbf0
0x0012fbc0
0x0012fc60
0x0012fc20
0x0012fae0
0x0012faf0
0x0012fb40
0x0012fad0
0x0012fb90
0x0012fb60
0x001301a0
0x001300d0
0x001302a0
0x00130260
0x00130240
0x00130220
0x00130060
0x00130210
0x00130130
0x00130070
0x00134b20
0x00134b50
0x00134ba0
0x00134c00
0x00134c70
0x00134c60
0x001353d0
0x00135850
0x00135cd0
0x001355e0
0x00135dc0
0x00135a80
0x001351c0
0x00183f54
0x00027220
0x00183f64
0x000275d0
0x00183f7e
0x00027a60
0x00183f90
0x00027e50
0x00183fb2
0x00028e60
0x00183fc2
0x00029a20
0x00027200
0x00183fe2
0x0002a750
0x00183ff2
0x0002ace0
0x00184013
0x00028300
0x00027200
0x00184024
0x00028620
0x00184042
0x0002b570
0x00184059
0x0002bb20
0x00030010
0x001bb3e0
0x001bb920
0x001bb9a0
0x001bc220
0x001bb760
0x001bb6e0
0x001bbee0
0x001bbf40
0x001bbfc0
0x001bc080
0x001bc100
0x001bc160
0x0016f3e0
0x0016e4e0
0x0016eae0
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00183fe9
0x00185835
0x00028620
0x00185835
0x00183fe9
0x00028300
0x00027200
0x001231c0
0x00123220
0x00123440
0x00125b90
ifunc_8a6c0
ifunc_b79b0
ifunc_89770
ifunc_a46d0
ifunc_8aac0
ifunc_8a950
ifunc_8a990
ifunc_89b70
ifunc_8a620
ifunc_8aa70
ifunc_89740
ifunc_89250
ifunc_898b0
ifunc_a4d60
ifunc_a4d60
ifunc_89300
ifunc_a4ca0
ifunc_89340
ifunc_89770
ifunc_a46d0
ifunc_8a790
ifunc_89290
ifunc_897e0
ifunc_8a650
ifunc_8a830
ifunc_a4700
ifunc_a4ca0
ifunc_8c030
ifunc_b78c0
ifunc_89880
ifunc_89210
ifunc_8a9d0
ifunc_89840
ifunc_8a6c0
0x00000038
0x00000030
0x00000050
0x00000040
0x00000048
0x00000058
0x00000060
0x00000078
0x00000080
0x00000088
stderr
error_one_per_line
realloc
__morecore
__key_encryptsession_pk_LOCAL
ifunc_8c060
__libpthread_freeres
__progname_full
__ctype32_tolower
_rtld_global
__progname
argp_err_exit_status
0x00000028
mallwatch
__rcmd_errstr
__libc_enable_secure
_res_hconf
malloc
__tls_get_addr
getdate_err
svcauthdes_stats
__tzname
__timezone
ifunc_a4800
memalign
_dl_exception_create
0x00000074
_rtld_global_ro
__malloc_initialize_hook
ifunc_90b10
0x00000010
optarg
__ctype_tolower
__ctype_toupper
_IO_2_1_stderr_
__tunable_get_val
__ctype_b
argp_program_version_hook
__after_morecore_hook
__environ
_IO_2_1_stdout_
__ctype32_b
__curbrk
argp_program_version
ifunc_a5f90
ifunc_8ab70
__daylight
__memalign_hook
0x00000020
__malloc_hook
__free_hook
_nl_domain_bindings
_nl_msg_cat_cntr
ifunc_8aa20
_dl_find_dso_for_object
argp_program_bug_address
__key_decryptsession_pk_LOCAL
h_errlist
0x00000018
program_invocation_short_name
calloc
optind
_dl_starting_up
stdout
obstack_alloc_failed_handler
error_print_progname
optopt
_IO_funlockfile
obstack_exit_failure
loc1
error_message_count
__libdl_freeres
_IO_2_1_stdin_
loc2
program_invocation_name
free
__fpu_control
re_syntax_options
stdin
__check_rhosts_file
opterr
__ctype32_toupper
__realloc_hook
_dl_argv
0x00000008
0x00183fe9
0x00183f44
0x00183f54
0x00183f44
0x00183fe9
0x00183f64
0x00183fe9
0x00183f74
0x00183f7e
0x00183f74
0x00183fe9
0x00183f90
0x00183fe9
0x00183fa2
0x00183fb2
0x00183fa2
0x00183fe9
0x00183fc2
0x00183fd2
0x00183fe9
0x00183fe2
0x00183fe9
0x00183fd2
0x00183ff2
0x00184002
0x00183fe9
0x00184013
0x00183fe9
0x00184002
0x00184024
0x00184035
0x00183fe9
0x00184042
0x00183fe9
0x00184035
0x00184059
0x0016eae0
0x0016e4e0
0x0016eae0
0x0016e4e0
0x0016eee0
0x0016f3e0
0x00187f10
0x001bfbe0
0x001c0000
0x001be030
0x001be024
0x001be024
0x001be0a0
0x001bc320
0x001babc0
0x001babc0
0x001c0730
0x001be940
0x001bb100
0x001babc0
0x00085ed0
0x000865a0
0x00085bf0
0x001beaa0
0x000873e0
0x000886a0
0x001858cc
0x001858cc
0x0018431f
0x0018431f
0x001c1458
0x001bd540
0x0018b638
0x001bb3e0
0x001bb920
0x001bb9a0
0x001bc220
0x001bb760
0x001bb6e0
0x001bbee0
0x001bbf40
0x001bbfc0
0x001bc080
0x001bc100
0x001bc160
0x0016f3e0
0x0016e4e0
0x0016eae0
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
0x00186007
_IO_2_1_stderr_
_IO_2_1_stdout_
0x001c0710
0x001be5e0
0x001bb100
_IO_2_1_stdin_
0x001c0720
0x001be720
0x001bb100
_IO_2_1_stderr_
_IO_2_1_stdout_
_IO_2_1_stdin_
0x00024480
EOF
RUN

NAME=get function in, node before entry
FILE=bins/elf/fcn_in_test.elf
CMDS=e asm.lines=false;e asm.comments=false;af @ main; pdr @ 0x1180
EXPECT=<<EOF
;-- start2:
0x00001180      31c0           xor eax, eax
0x00001182      eb06           jmp loc.start
| // true: 0x0000118a
18: int main (int argc, char **argv, char **envp);
0x00001184      31c0           xor eax, eax
0x00001186      75f8           jne loc.start2
| // true: 0x00001180  false: 0x00001188
0x00001188      ebf6           jmp loc.start2
| // true: 0x00001180
;-- start:
0x0000118a      89c0           mov eax, eax
0x0000118c      50             push eax
0x0000118d      90             nop
0x0000118e      90             nop
0x0000118f      90             nop
0x00001190      90             nop
0x00001191      c3             ret

EOF
RUN

NAME=long basic blocks
FILE=bins/elf/analysis/movfuscator
BROKEN=1
CMDS=<<EOF
af
afb
EOF
EXPECT=<<EOF
0x0804827c 0x0804c2fc 00:0000 16512
EOF
RUN

NAME=arj x86 32 bits
FILE=malloc://0x100
CMDS=<<EOF
e asm.arch = x86
e anal.arch = x86
e asm.bits=32
arj
EOF
EXPECT=<<EOF
{"oeax":0,"eax":0,"ebx":0,"ecx":0,"edx":0,"esi":0,"edi":0,"esp":0,"ebp":0,"eip":0,"eflags":0}
EOF
RUN

NAME=af x86-32..
FILE=malloc://1024
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 6a00 4889e5 c3
af
afl~[2]
EOF
EXPECT=<<EOF
6
EOF
RUN

NAME=af x86-32 ujmp 
FILE=malloc://1024
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 6a00 4889e5 ff25f8120000 ff25f8120000ffe0c3
af
afl~[2]
EOF
EXPECT=<<EOF
11
EOF
RUN


NAME=af bug
FILE=malloc://1024
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 6a004889e54883e4f0488b7d08488d751089fa83c201c1e2034801f24889d1eb044883c1084883390075f64883c108e8580f000089c7e81b390000c3554889e5
s +0x40
wx 488d4768488d7e684889c6c9e9013a0000554889e54883c6684883c768c9e9ef390000554889e5534889f1488b5660488b4760488b583048395a307f1d7c2248
s -0x40
af
b 0x80
pIf
EOF
EXPECT=<<EOF
push 0
dec eax
mov ebp, esp
dec eax
and esp, 0xfffffff0
dec eax
mov edi, dword [arg_8h]
dec eax
lea esi, [arg_10h]
mov edx, edi
add edx, 1
shl edx, 3
dec eax
add edx, esi
dec eax
mov ecx, edx
jmp 0x25
dec eax
add ecx, 8
dec eax
cmp dword [ecx], 0
jne 0x21
dec eax
add ecx, 8
call 0xf8c
mov edi, eax
call 0x3956
ret
EOF
RUN

NAME=disasm bug
FILE=malloc://1024
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 6a004889e54883e4f0488b7d08488d751089fa83c201c1e2034801f24889d1eb044883c1084883390075f64883c108e8580f000089c7e81b390000c3554889e5
s+0x40
wx 488d4768488d7e684889c6c9e9013a0000554889e54883c6684883c768c9e9ef390000554889e5534889f1488b5660488b4760488b583048395a307f1d7c2248
s-0x40
b 0x100
af
pIf @0
EOF
EXPECT=<<EOF
push 0
dec eax
mov ebp, esp
dec eax
and esp, 0xfffffff0
dec eax
mov edi, dword [arg_8h]
dec eax
lea esi, [arg_10h]
mov edx, edi
add edx, 1
shl edx, 3
dec eax
add edx, esi
dec eax
mov ecx, edx
jmp 0x25
dec eax
add ecx, 8
dec eax
cmp dword [ecx], 0
jne 0x21
dec eax
add ecx, 8
call 0xf8c
mov edi, eax
call 0x3956
ret
EOF
RUN

NAME=af afF
FILE=malloc://1024
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 6a004889e5c3
af test
afF
pd 1 @ test
EOF
EXPECT=<<EOF
/ (fcn) test
\           0x00000000 (6 byte folded function)
EOF
RUN

NAME=af afF graph
FILE=malloc://1024
CMDS=<<EOF
e anal.hasnext=0
e asm.arch=x86
e asm.bits=32
wx 6a004889e5c3
af test
afF
agf
EOF
EXPECT=<<EOF
.--------------------------.
|  0x0                     |
| / (fcn) test             |
| (6 byte folded function) |
`--------------------------'
EOF
RUN

NAME=ahc
FILE=malloc://16
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx ebfe
ahs 5
ahc 0x25
ahf 0x25
ao 1~jump,fail,size[1]
EOF
EXPECT=<<EOF
jump
5
0x00000025
0x00000025
EOF
RUN

NAME=ahi S
FILE=malloc://16
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e asm.os=linux
wx b801000000
ahi S
pi 1
EOF
EXPECT=<<EOF
mov eax, exit()
EOF
RUN

NAME=ao cjmp
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx 761b
ao~jump,fail,size
EOF
EXPECT=<<EOF
description: jump short if below or equal/not above (cf=1 or zf=1)
size: 2
jump: 0x0000001d
fail: 0x00000002
EOF
RUN

NAME=aoj 31c0
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx 31c0
aoj~{}
EOF
EXPECT=<<EOF
[
  {
    "opcode": "xor eax, eax",
    "disasm": "xor eax, eax",
    "pseudo": "eax = 0",
    "description": "logical exclusive or",
    "mnemonic": "xor",
    "mask": "ffff",
    "esil": "eax,eax,^=,$z,zf,:=,$p,pf,:=,31,$s,sf,:=,0,cf,:=,0,of,:=",
    "sign": false,
    "id": 1503,
    "opex": {
      "operands": [
        {
          "size": 4,
          "rw": 3,
          "type": "reg",
          "value": "eax"
        },
        {
          "size": 4,
          "rw": 1,
          "type": "reg",
          "value": "eax"
        }
      ],
      "modrm": true
    },
    "addr": 0,
    "bytes": "31c0",
    "size": 2,
    "type": "xor",
    "esilcost": 0,
    "cycles": 1,
    "failcycles": 0,
    "delay": 0,
    "stackptr": 0,
    "family": "cpu"
  }
]
EOF
RUN

NAME=aoj pushf
FILE=-
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx 669c
aoj~{}
EOF
EXPECT=<<EOF
[
  {
    "opcode": "pushf",
    "disasm": "pushf",
    "pseudo": "push (cpuflags)",
    "description": "push flags register onto the stack",
    "mnemonic": "pushf",
    "mask": "ffff",
    "esil": "4,esp,-=,eflags,esp,=[4]",
    "sign": false,
    "id": 612,
    "opex": {
      "operands": [
        {
          "size": 4,
          "rw": 1,
          "type": "reg",
          "value": "eflags"
        }
      ]
    },
    "addr": 0,
    "bytes": "669c",
    "size": 2,
    "type": "upush",
    "esilcost": 12,
    "cycles": 2,
    "failcycles": 0,
    "delay": 0,
    "stack": "inc",
    "stackptr": 4,
    "family": "cpu"
  }
]
EOF
RUN

NAME=reflines offset
FILE=malloc://1023
CMDS=<<EOF
e asm.cmt.calls=false
e asm.bits=32
e asm.cpu=x86
e asm.arch=x86
e scr.utf8=true
e anal.vars.stackname=true
e asm.comments=false
e asm.bytes=false
wx 31c039d6724aeb72908db426000000008d7e0131d289e8f7f131d28944241c89f8f7f13944241c76678b93080200008b028b50143b5018736dc6020983c20189501489f031d201cef7f129d639f5762a8b8b8c05000085c975b683c6018b93080200008b028b50143b50187327c6022083c20139f589501477d68b44242c65330514000000753783c43c5b5e5f5dc39089feebc9c744240420000000890424e87cc9ffffeba6c744240409000000890424e86ac9ffff8b8b8c050000eb84e87d1001008db6000000008dbc270000000055575653e8f7f0ffff81c32b9d010083ec3c658b0d14000000894c242c31c98b6a0c8b720889e929f1c1e90285c9894c241c0f848100000039f50f84930000008b7a1801fdf7d721fd8b7a1089e9896a0c2b4a0489fd2b6a0439e97f718b7a0c31ed
aa > /dev/null
pd 38
EOF
EXPECT=<<EOF
┌ (fcn) fcn.00000000 1645
// void fcn.00000000 (int32_t arg_4h, int32_t arg_1ch, int32_t arg_2ch);
│           ; arg int32_t arg_4h @ esp+0x50
│           ; arg int32_t arg_1ch @ esp+0x68
│           ; arg int32_t arg_2ch @ esp+0x78
│           ; var int32_t var_30h @ esp+0x1c
│           ; var int32_t var_20h @ esp+0x2c
│           0x00000000      xor eax, eax
│           0x00000002      cmp esi, edx
│       ┌─< 0x00000004      jb 0x50
│      ┌──< 0x00000006      jmp 0x7a
       ││   0x00000008      nop
       ││   0x00000009      lea esi, [esi]
│     ┌───> 0x00000010      lea edi, [esi + 1]
│     ╎││   0x00000013      xor edx, edx
│     ╎││   0x00000015      mov eax, ebp
│     ╎││   0x00000017      div ecx
│     ╎││   0x00000019      xor edx, edx
│     ╎││   0x0000001b      mov dword [arg_1ch], eax
│     ╎││   0x0000001f      mov eax, edi
│     ╎││   0x00000021      div ecx
│     ╎││   0x00000023      cmp dword [arg_1ch], eax
│    ┌────< 0x00000027      jbe 0x90
│    │╎││   0x00000029      mov edx, dword [ebx + 0x208]
│    │╎││   0x0000002f      mov eax, dword [edx]
│    │╎││   0x00000031      mov edx, dword [eax + 0x14]
│    │╎││   0x00000034      cmp edx, dword [eax + 0x18]
│   ┌─────< 0x00000037      jae 0xa6
│   ││╎││   0x00000039      mov byte [edx], 9
│   ││╎││   0x0000003c      add edx, 1
│   ││╎││   0x0000003f      mov dword [eax + 0x14], edx
│   ││╎││   0x00000042      mov eax, esi
│   ││╎││   0x00000044      xor edx, edx
│   ││╎││   0x00000046      add esi, ecx
│   ││╎││   0x00000048      div ecx
│   ││╎││   0x0000004a      sub esi, edx
│   ││╎││   0x0000004c      cmp ebp, esi
│  ┌──────< 0x0000004e      jbe 0x7a
│  │││╎│└─> 0x00000050      mov ecx, dword [ebx + 0x58c]
│  │││╎│    0x00000056      test ecx, ecx
│  │││└───< 0x00000058      jne 0x10
│  │││ │    0x0000005a      add esi, 1
│  │││ │    0x0000005d      mov edx, dword [ebx + 0x208]
│  │││ │    0x00000063      mov eax, dword [edx]
│  │││ │    0x00000065      mov edx, dword [eax + 0x14]
EOF
RUN

NAME=reflines offset (ascii)
FILE=malloc://1023
CMDS=<<EOF
e asm.cmt.calls=false
e asm.bits=32
e asm.cpu=x86
e anal.cpu=x86
e anal.vars.stackname=true
e asm.arch=x86
e asm.comments=false
e asm.bytes=false
wx 31c039d6724aeb72908db426000000008d7e0131d289e8f7f131d28944241c89f8f7f13944241c76678b93080200008b028b50143b5018736dc6020983c20189501489f031d201cef7f129d639f5762a8b8b8c05000085c975b683c6018b93080200008b028b50143b50187327c6022083c20139f589501477d68b44242c65330514000000753783c43c5b5e5f5dc39089feebc9c744240420000000890424e87cc9ffffeba6c744240409000000890424e86ac9ffff8b8b8c050000eb84e87d1001008db6000000008dbc270000000055575653e8f7f0ffff81c32b9d010083ec3c658b0d14000000894c242c31c98b6a0c8b720889e929f1c1e90285c9894c241c0f848100000039f50f84930000008b7a1801fdf7d721fd8b7a1089e9896a0c2b4a0489fd2b6a0439e97f718b7a0c31ed
aa >/dev/null
pd 38
EOF
EXPECT=<<EOF
/ (fcn) fcn.00000000 1645
// void fcn.00000000 (int32_t arg_4h, int32_t arg_1ch, int32_t arg_2ch);
|           ; arg int32_t arg_4h @ esp+0x50
|           ; arg int32_t arg_1ch @ esp+0x68
|           ; arg int32_t arg_2ch @ esp+0x78
|           ; var int32_t var_30h @ esp+0x1c
|           ; var int32_t var_20h @ esp+0x2c
|           0x00000000      xor eax, eax
|           0x00000002      cmp esi, edx
|       ,=< 0x00000004      jb 0x50
|      ,==< 0x00000006      jmp 0x7a
       ||   0x00000008      nop
       ||   0x00000009      lea esi, [esi]
|     .---> 0x00000010      lea edi, [esi + 1]
|     :||   0x00000013      xor edx, edx
|     :||   0x00000015      mov eax, ebp
|     :||   0x00000017      div ecx
|     :||   0x00000019      xor edx, edx
|     :||   0x0000001b      mov dword [arg_1ch], eax
|     :||   0x0000001f      mov eax, edi
|     :||   0x00000021      div ecx
|     :||   0x00000023      cmp dword [arg_1ch], eax
|    ,====< 0x00000027      jbe 0x90
|    |:||   0x00000029      mov edx, dword [ebx + 0x208]
|    |:||   0x0000002f      mov eax, dword [edx]
|    |:||   0x00000031      mov edx, dword [eax + 0x14]
|    |:||   0x00000034      cmp edx, dword [eax + 0x18]
|   ,=====< 0x00000037      jae 0xa6
|   ||:||   0x00000039      mov byte [edx], 9
|   ||:||   0x0000003c      add edx, 1
|   ||:||   0x0000003f      mov dword [eax + 0x14], edx
|   ||:||   0x00000042      mov eax, esi
|   ||:||   0x00000044      xor edx, edx
|   ||:||   0x00000046      add esi, ecx
|   ||:||   0x00000048      div ecx
|   ||:||   0x0000004a      sub esi, edx
|   ||:||   0x0000004c      cmp ebp, esi
|  ,======< 0x0000004e      jbe 0x7a
|  |||:|`-> 0x00000050      mov ecx, dword [ebx + 0x58c]
|  |||:|    0x00000056      test ecx, ecx
|  |||`===< 0x00000058      jne 0x10
|  ||| |    0x0000005a      add esi, 1
|  ||| |    0x0000005d      mov edx, dword [ebx + 0x208]
|  ||| |    0x00000063      mov eax, dword [edx]
|  ||| |    0x00000065      mov edx, dword [eax + 0x14]
EOF
RUN

NAME=no string on jmp
FILE=malloc://8096
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e emu.str=true
wa jmp 0x100
w hello @ 0x100
pd 1
EOF
EXPECT=<<EOF
        ,=< 0x00000000      e9fb000000     jmp 0x100
EOF
RUN

NAME=afva for esp based vars
FILE=malloc://1024
CMDS=<<EOF
e asm.bits=32
e asm.arch = x86
e anal.arch = x86
e anal.vars.stackname=true
e asm.cmt.calls=false
wx 83ec108b44241899f77c241c8b44241401d08944240c8b44242099f77c24288b44240c01d0894424088b5424148b44240c8d0c028b44242c99f7f98b44240801d0894424048b54240c8b44240801c28b44240401d083c410c38d4c240483e4f0ff71fc5589e55183ec046a076a066a056a046a036a026a01e883ffffff83c41c83ec08506844850408e847feffff83c410b8000000008b4dfcc98d61fcc36690669066909055575653e887feffff81c3371b000083ec0c8b6c24208db30cffffffe8d3fdffff8d8308ffffff29c6c1fe0285f6742531ff8db60000000083ec04ff74242cff74242c55ff94bb08ffffff83c70183c41039f775e383c40c5b5e5f
e asm.bits=32
e asm.comments=false
aa
afva
pdf
EOF
EXPECT=<<EOF
/ (fcn) fcn.00000000 89
// void fcn.00000000 (int32_t arg_4h, int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_18h, int32_t arg_1ch);
|           ; arg int32_t arg_4h @ esp+0x14
|           ; arg int32_t arg_8h @ esp+0x18
|           ; arg int32_t arg_ch @ esp+0x1c
|           ; arg int32_t arg_10h @ esp+0x20
|           ; arg int32_t arg_18h @ esp+0x28
|           ; arg int32_t arg_1ch @ esp+0x2c
|           ; var int32_t var_ch @ esp+0x4
|           ; var int32_t var_8h @ esp+0x8
|           ; var int32_t var_4h @ esp+0xc
|           0x00000000      83ec10         sub esp, 0x10
|           0x00000003      8b442418       mov eax, dword [arg_8h]
|           0x00000007      99             cdq
|           0x00000008      f77c241c       idiv dword [arg_ch]
|           0x0000000c      8b442414       mov eax, dword [arg_4h]
|           0x00000010      01d0           add eax, edx
|           0x00000012      8944240c       mov dword [var_4h], eax
|           0x00000016      8b442420       mov eax, dword [arg_10h]
|           0x0000001a      99             cdq
|           0x0000001b      f77c2428       idiv dword [arg_18h]
|           0x0000001f      8b44240c       mov eax, dword [var_4h]
|           0x00000023      01d0           add eax, edx
|           0x00000025      89442408       mov dword [var_8h], eax
|           0x00000029      8b542414       mov edx, dword [arg_4h]
|           0x0000002d      8b44240c       mov eax, dword [var_4h]
|           0x00000031      8d0c02         lea ecx, [edx + eax]
|           0x00000034      8b44242c       mov eax, dword [arg_1ch]
|           0x00000038      99             cdq
|           0x00000039      f7f9           idiv ecx
|           0x0000003b      8b442408       mov eax, dword [var_8h]
|           0x0000003f      01d0           add eax, edx
|           0x00000041      89442404       mov dword [var_ch], eax
|           0x00000045      8b54240c       mov edx, dword [var_4h]
|           0x00000049      8b442408       mov eax, dword [var_8h]
|           0x0000004d      01c2           add edx, eax
|           0x0000004f      8b442404       mov eax, dword [var_ch]
|           0x00000053      01d0           add eax, edx
|           0x00000055      83c410         add esp, 0x10
\           0x00000058      c3             ret
EOF
RUN

NAME=af x86-32
FILE=malloc://16
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx 9090
ao 1~?
ao 1
p8 1
EOF
EXPECT=<<EOF
15
address: 0x0
opcode: nop
esilcost: 0
disasm: nop
mnemonic: nop
description: no operation
mask: ff
id: 510
bytes: 90
size: 1
sign: false
type: nop
cycles: 1
esil: ,
family: cpu
90
EOF
RUN

NAME=Fix #15315 - Honor RAnalOp.disp in `aar` and `ao`
FILE=bins/pe/honor_ranal_op_disp.exe
CMDS=<<EOF
aar
s 0x00402130
axt
EOF
EXPECT=<<EOF
(nofunc) 0x4010d1 [DATA:r--] lea edx, [ebx*4 + 0x402130]
EOF
RUN

NAME=Indirect jump table case detection
FILE=--
CMDS=<<EOF
o malloc://0x500 0x401000
omf 1 rwx
s 0x401000
e asm.arch=x86
e asm.bits=32
wx 568b74240856ff15c02040004e83c40483fe270f87df0000000fb6863c114000ff24850c114000b8f820400050ff15b420400083c40433c05ec3b80021400050ff15b420400083c40433c05ec3b80821400050ff15b420400083c40433c05ec3b81021400050ff15b420400083c40433c05ec3b81821400050ff15b420400083c40433c05ec3b82021400050ff15b420400083c40433c05ec3b82821400050ff15b420400083c40433c05ec3b83021400050ff15b420400083c40433c05ec3b83821400050ff15b420400083c40433c05ec3b84021400050ff15b420400083c40433c05ec3b84821400050ff15b420400083c40433c05ec38b44240850ff15b420400083c40433c05ec36690271040003a1040004d104000e510400060104000731040008610400099104000d2104000bf104000ac104000f81040000001020b0b0b0b0b0b03020b040b05060b0b07080b0b0b0b0b0b0b0b0b090b0b0b0b0b0a0b0a0a0a
af
f~case
EOF
EXPECT=<<EOF
0x00401027 1 case.0x401020.1
0x0040103a 1 case.0x401020.2
0x0040104d 1 case.0x401020.3
0x0040104d 1 case.0x401020.11
0x00401060 1 case.0x401020.13
0x00401073 1 case.0x401020.15
0x00401086 1 case.0x401020.16
0x00401099 1 case.0x401020.19
0x004010ac 1 case.0x401020.36
0x004010ac 1 case.0x401020.38
0x004010ac 1 case.0x401020.39
0x004010ac 1 case.0x401020.40
0x004010bf 1 case.0x401020.30
0x004010d2 1 case.0x401020.20
0x004010e5 1 case.0x401020.10
0x004010f8 1 case.0x401020.4
0x004010f8 1 case.0x401020.5
0x004010f8 1 case.0x401020.6
0x004010f8 1 case.0x401020.7
0x004010f8 1 case.0x401020.8
0x004010f8 1 case.0x401020.9
0x004010f8 1 case.0x401020.12
0x004010f8 1 case.0x401020.14
0x004010f8 1 case.0x401020.17
0x004010f8 1 case.0x401020.18
0x004010f8 1 case.0x401020.21
0x004010f8 1 case.0x401020.22
0x004010f8 1 case.0x401020.23
0x004010f8 1 case.0x401020.24
0x004010f8 1 case.0x401020.25
0x004010f8 1 case.0x401020.26
0x004010f8 1 case.0x401020.27
0x004010f8 1 case.0x401020.28
0x004010f8 1 case.0x401020.29
0x004010f8 1 case.0x401020.31
0x004010f8 1 case.0x401020.32
0x004010f8 1 case.0x401020.33
0x004010f8 1 case.0x401020.34
0x004010f8 1 case.0x401020.35
0x004010f8 1 case.0x401020.37
0x004010f8 1 case.default.0x401020
EOF
RUN

NAME=movd in SSE register
FILE=malloc://512
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx 660F6Ec0 # movd xmm0, eax
aei
aeim
ar eax = 0xa0a1a2a3
aes
ar xmm0
EOF
EXPECT=<<EOF
0x000000000000000000000000a0a1a2a3
EOF
RUN

NAME=SSE bitwise instructions
FILE=malloc://512
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
wx 660fdffb660f73ff09660fefdf660f73fb02
aei
aeim
ar xmm3l = 0xa5a6a7a8
ar xmm3h = 0xa9aaabac
ar xmm7l = 0x0f0e0d0c
4aes
ar xmm3
EOF
EXPECT=<<EOF
0x00a009080bac00000000a5a6a7a80000
EOF
RUN

NAME=tiny1 aaef
FILE=bins/elf/analysis/tiny1
ARGS=-N
CMDS=<<EOF
e asm.bytes=false
e asm.comments=false
aF
aaef  # TODO Fix if aae here
pdf
# TODO eip flag?
EOF
EXPECT=<<EOF
            ;-- eip:
/ 7: entry0 ();
|           0x08048054      mov bl, 0x2a
|           0x08048056      xor eax, eax
|           0x08048058      inc eax
|           ;-- syscall.exit:
|           ;-- syscall.exit.0:
\           0x08048059      int 0x80
EOF
RUN


NAME=tiny1 aae
FILE=bins/elf/analysis/tiny1
CMDS=<<EOF
e asm.bytes=false
e asm.comments=false
aF
aae
pdf
EOF
EXPECT=<<EOF
/ 7: entry0 ();
|           0x08048054      mov bl, 0x2a
|           0x08048056      xor eax, eax
|           0x08048058      inc eax
|           ;-- syscall.exit:
\           0x08048059      int 0x80
EOF
RUN

NAME=tiny1 aae non-start-bb first
FILE=bins/elf/analysis/tiny1
CMDS=<<EOF
e asm.arch=x86
e asm.bits=32
e io.cache=true
$orig_end=?e `om,va_end/cols~[0]:3`
omr 1 `om,size/cols~[0]:3`+2
s `$orig_end`+1
wa jmp entry0
aF
aae
agf
?e
afl
EOF
EXPECT=<<EOF
.----.
|    |
|.----------------------------------------------.
||  0x8048054                                   |
|| ;-- entry0:                                  |
|| ; CODE XREF from fcn.0804805b @ 0x804805b(x) |
|| ; '*'                                        |
|| ; 42                                         |
|| mov bl, 0x2a                                 |
|| xor eax, eax                                 |
|| inc eax                                      |
|| ;-- syscall.close:                           |
|| int 0x80                                     |
|`----------------------------------------------'
|    v
|    |
|    '------------.
|                 |
|             .---------------------.
|             |  0x804805b          |
|             | 9: fcn.0804805b (); |
|             | jmp entry0          |
|             `---------------------'
|                 v
|                 |
`-----------------'

0x0804805b    2      9 fcn.0804805b
EOF
RUN
