NAME=mach0 swift demangle methods
FILE=bins/mach0/swift/klass.orig
CMDS=<<EOF
icc
EOF
EXPECT=<<EOF
class SomeClass  {
  property meh;
  property cow;
  func 0() {}  // 0x100003cff
  func 1() {}  // 0x100003d08
  func 2() {}  // 0x100003d0e
  func 3() {}  // 0x100003d17
  func 4() {}  // 0x100003d20
  func 5() {}  // 0x100003d24
  func 6() {}  // 0x100003d1d
  func allocator() {}  // 0x100003d90
  func 8() {}  // 0x100003d2c
  func 9() {}  // 0x100003d34
}
class SuperKlass  {
  property superfield;
  func superfield.allocator__Swift.Int() {}  // 0x1000028f0
  func superfield.allocator__Swift.Int() {}  // 0x100002950
  func superfield.allocator__Swift.Int() {}  // 0x1000029b0
  func allocator() {}  // 0x100002a10
  func 4() {}  // 0x100003d9c
}
@objc
class klass.SomeClass : klass.SuperKlass {
  var isa : struct objc_class *;
  var meh;
  var cow;
}
@objc
class klass.SuperKlass : Swift._SwiftObject {
  var isa : struct objc_class *;
  var superfield;
}
class swift  {
  func getRootSuperclass() {}  // 0x100002b70
  func swift51override_conformsToSwiftProtocol(swift::TargetMetadata<swift::InProcess> const*, swift::TargetProtocolDescriptor<swift::InProcess> const*, llvm::StringRef, swift::TargetProtocolConformanceDescriptor<swift::InProcess> const* (*)(swift::TargetMetadata<swift::InProcess> const*, swift::TargetProtocolDescriptor<swift::InProcess> const*, llvm::StringRef)) {}  // 0x100002bb0
  func Lazy<(anonymous namespace)::ConformanceState>::defaultInitCallback(void*) {}  // 0x1000031f0
  func getRootSuperclass()::$_0::operator()() const::{lambda(void*)#1}::__invoke(void*) {}  // 0x100003650
  func getRootSuperclass()::$_0::operator()() const::TheLazy {}  // 0x100008568
}
EOF
RUN

NAME=swift-x86-64 calling convention json
ARGS=-e bin.demangle=false
FILE=bins/mach0/swift5.1-throwError
CMDS=<<EOF
s sym.__s10throwError7ThrowerC0a2MyB0yyKF
af
afc swift
afva
afcrj
afvj
EOF
EXPECT=<<EOF
{"ret":"rax","args":["rdi","rsi","rdx","rcx","r8","r9","xmm0","xmm1","xmm2","xmm3","xmm4"],"self":"r13","error":"r12"}
{"reg":[{"name":"self","kind":"reg","type":"int64_t","ref":"r13"},{"name":"error","kind":"reg","type":"int64_t","ref":"r12"}],"sp":[],"bp":[{"name":"var_10h","kind":"var","type":"int64_t","ref":{"base":"rbp","offset":-16}},{"name":"var_18h","kind":"var","type":"int64_t","ref":{"base":"rbp","offset":-24}},{"name":"var_20h","kind":"var","type":"int64_t","ref":{"base":"rbp","offset":-32}},{"name":"var_28h","kind":"var","type":"int64_t","ref":{"base":"rbp","offset":-40}}]}
EOF
RUN
