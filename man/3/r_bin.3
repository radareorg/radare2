.Dd September 20, 2025
.Dt R_BIN 3
.Os
.Sh NAME
.Nm r_bin
.Nd Radare2 Binary Analysis Library API
.Sh SYNOPSIS
.In r_bin.h
.Ft RBin *
.Fn r_bin_new "void"
.Ft void
.Fn r_bin_free "RBin *bin"
.Ft bool
.Fn r_bin_open "RBin *bin" "const char *file" "RBinFileOptions *opt"
.Ft RBinInfo *
.Fn r_bin_get_info "RBin *bin"
.Ft RList *
.Fn r_bin_get_sections "RBin *bin"
.Ft RList *
.Fn r_bin_get_symbols "RBin *bin"
.Ft RList *
.Fn r_bin_get_imports "RBin *bin"
.Ft RList *
.Fn r_bin_get_entries "RBin *bin"
.Ft RList *
.Fn r_bin_get_strings "RBin *bin"
.Ft RRBTree *
.Fn r_bin_get_relocs "RBin *bin"
.Ft RList *
.Fn r_bin_get_classes "RBin *bin"
.Ft bool
.Fn r_bin_plugin_add "RBin *bin" "RBinPlugin *plugin"
.Ft char *
.Fn r_bin_demangle "RBinFile *binfile" "const char *lang" "const char *str" "ut64 vaddr" "bool libs"
.Ft void
.Fn r_bin_list "RBin *bin" "PJ *pj" "int format"
.Sh DESCRIPTION
The
.Nm r_bin
library provides binary analysis capabilities in radare2, supporting parsing of various executable formats, extracting symbols, sections, strings, and other metadata. It abstracts binary file parsing through a plugin system.
.Pp
Key concepts:
.Bl -bullet
.It
.Nm RBin
is the main structure managing binary analysis.
.It
.Nm RBinFile
represents an open binary file.
.It
.Nm RBinObject
contains parsed binary data like symbols, sections, etc.
.It
Plugins handle different binary formats (ELF, PE, Mach-O, etc.).
.It
Demangling converts mangled symbol names to readable form.
.El
.Sh INITIALIZATION
.Ft RBin *
.Fn r_bin_new "void"
.Pp
Creates a new binary analysis context.
.Ft void
.Fn r_bin_free "RBin *bin"
.Pp
Frees a binary analysis context.
.Ft bool
.Fn r_bin_open "RBin *bin" "const char *file" "RBinFileOptions *opt"
.Pp
Opens a binary file for analysis with given options.
.Sh BINARY INFORMATION
.Ft RBinInfo *
.Fn r_bin_get_info "RBin *bin"
.Pp
Retrieves general information about the binary (architecture, OS, etc.).
.Ft RList *
.Fn r_bin_get_sections "RBin *bin"
.Pp
Gets a list of sections in the binary.
.Ft RList *
.Fn r_bin_get_symbols "RBin *bin"
.Pp
Gets a list of symbols in the binary.
.Ft RList *
.Fn r_bin_get_imports "RBin *bin"
.Pp
Gets a list of imported symbols.
.Ft RList *
.Fn r_bin_get_entries "RBin *bin"
.Pp
Gets a list of entry points.
.Ft RList *
.Fn r_bin_get_strings "RBin *bin"
.Pp
Gets a list of strings in the binary.
.Ft RRBTree *
.Fn r_bin_get_relocs "RBin *bin"
.Pp
Gets relocation information.
.Ft RList *
.Fn r_bin_get_classes "RBin *bin"
.Pp
Gets a list of classes (for object-oriented binaries).
.Sh PLUGIN MANAGEMENT
.Ft bool
.Fn r_bin_plugin_add "RBin *bin" "RBinPlugin *plugin"
.Pp
Adds a binary format plugin.
.Ft void
.Fn r_bin_list "RBin *bin" "PJ *pj" "int format"
.Pp
Lists available plugins or loaded binaries.
.Sh DEMANGLING
.Ft char *
.Fn r_bin_demangle "RBinFile *binfile" "const char *lang" "const char *str" "ut64 vaddr" "bool libs"
.Pp
Demangles a symbol name using the specified language.
.Ft char *
.Fn r_bin_demangle_java "const char *str"
.Pp
Demangles a Java symbol.
.Ft char *
.Fn r_bin_demangle_cxx "RBinFile *binfile" "const char *str" "ut64 vaddr"
.Pp
Demangles a C++ symbol.
.Sh FILE OPERATIONS
.Ft RBinFile *
.Fn r_bin_cur "RBin *bin"
.Pp
Gets the current binary file.
.Ft bool
.Fn r_bin_select "RBin *bin" "const char *arch" "int bits" "const char *name"
.Pp
Selects a binary file by architecture and name.
.Ft bool
.Fn r_bin_file_close "RBin *bin" "int bd"
.Pp
Closes a binary file descriptor.
.Sh ADDRESS LINE INFORMATION
.Ft RBinAddrline *
.Fn r_bin_addrline_at "RBin *bin" "ut64 addr"
.Pp
Gets debug line information for an address.
.Ft void
.Fn r_bin_addrline_reset "RBin *bin"
.Pp
Resets address line information.
.Sh BINARY WRITING
.Ft bool
.Fn r_bin_wr_addlib "RBin *bin" "const char *lib"
.Pp
Adds a library dependency to the binary.
.Ft bool
.Fn r_bin_wr_entry "RBin *bin" "ut64 addr"
.Pp
Sets the entry point address.
.Sh FILTERING
.Ft void
.Fn r_bin_load_filter "RBin *bin" "ut64 rules"
.Pp
Loads symbol filtering rules.
.Ft bool
.Fn r_bin_string_filter "RBin *bin" "const char *str" "ut64 addr"
.Pp
Filters strings based on criteria.
.Sh EXAMPLES
Opening and analyzing a binary:
.Bd -literal
RBin *bin = r_bin_new();
RBinFileOptions opt = {0};
opt.fd = -1; // use filename
r_bin_open(bin, "/bin/ls", &opt);
RBinInfo *info = r_bin_get_info(bin);
if (info) {
    printf("Arch: %s\\n", info->arch);
}
RList *symbols = r_bin_get_symbols(bin);
if (symbols) {
    // iterate over symbols
}
r_bin_free(bin);
.Ed
.Pp
Demangling a symbol:
.Bd -literal
RBin *bin = r_bin_new();
// ... open binary ...
char *demangled = r_bin_demangle(NULL, "cxx", "_ZN4Test4funcEi", 0, false);
if (demangled) {
    printf("Demangled: %s\\n", demangled);
    free(demangled);
}
r_bin_free(bin);
.Ed
.Pp
Listing sections:
.Bd -literal
RBin *bin = r_bin_new();
// ... open binary ...
RList *sections = r_bin_get_sections(bin);
RListIter *iter;
RBinSection *sec;
r_list_foreach(sections, iter, sec) {
    printf("Section: %s @ 0x%"PFMT64x"\\n", sec->name, sec->vaddr);
}
r_bin_free(bin);
.Ed
.Sh SEE ALSO
.Xr r_core 3 ,
.Xr r_anal 3 ,
.Xr r_flag 3
.Sh AUTHORS
The radare2 project team.