.Dd September 20, 2025
.Dt R_CORE 3
.Os
.Sh NAME
.Nm r_core
.Nd Radare2 Core Library API
.Sh SYNOPSIS
.In r_core.h
.Ft RCore *
.Fn r_core_new "void"
.Ft void
.Fn r_core_free "RCore *core"
.Ft int
.Fn r_core_cmd "RCore *core" "const char *cmd" "bool log"
.Ft char *
.Fn r_core_cmd_str "RCore *core" "const char *cmd"
.Ft bool
.Fn r_core_seek "RCore *core" "ut64 addr" "bool rb"
.Ft RAnalOp *
.Fn r_core_anal_op "RCore *core" "ut64 addr" "int mask"
.Ft int
.Fn r_core_print_disasm "RCore *core" "ut64 addr" "ut8 *buf" "int len" "int count" "enum r_pdu_condition_t pdu_condition_type" "const void *pdu_condition" "bool count_bytes" "bool json" "PJ *pj" "RAnalFunction *pdf"
.Ft bool
.Fn r_core_bin_load "RCore *core" "const char *file" "ut64 baseaddr"
.Ft void
.Fn r_core_visual "RCore *core" "const char *input"
.Ft bool
.Fn r_core_project_open "RCore *core" "const char *file"
.Ft bool
.Fn r_core_project_save "RCore *core" "const char *file"
.Ft RCoreTask *
.Fn r_core_task_new "RCore *core" "bool create_cons" "const char *cmd" "RCoreTaskCallback cb" "void *user"
.Ft void
.Fn r_core_undo_push "RCore *core" "RCoreUndo *cu"
.Ft void
.Fn r_core_log_add "RCore *core" "const char *msg"
.Sh DESCRIPTION
The
.Nm r_core
library provides the central functionality of radare2, integrating all subsystems like analysis, disassembly, binary parsing, debugging, and user interface. It serves as the main API for interacting with radare2's core features.
.Pp
Key concepts:
.Bl -bullet
.It
.Nm RCore
is the main structure holding all radare2 state and subsystems.
.It
Command execution allows running radare2 commands programmatically.
.It
Seeking manages the current address position.
.It
Analysis provides disassembly, function analysis, and ESIL emulation.
.It
Binary loading handles file parsing and symbol extraction.
.It
Visual mode offers interactive UI for analysis.
.El
.Sh INITIALIZATION
.Ft RCore *
.Fn r_core_new "void"
.Pp
Creates a new radare2 core instance.
.Ft void
.Fn r_core_free "RCore *core"
.Pp
Frees a radare2 core instance.
.Ft bool
.Fn r_core_init "RCore *core"
.Pp
Initializes a core instance.
.Sh COMMAND EXECUTION
.Ft int
.Fn r_core_cmd "RCore *core" "const char *cmd" "bool log"
.Pp
Executes a radare2 command.
.Ft char *
.Fn r_core_cmd_str "RCore *core" "const char *cmd"
.Pp
Executes a command and returns the output as a string.
.Ft int
.Fn r_core_cmdf "RCore *core" "const char *fmt" "..."
.Pp
Executes a formatted command.
.Ft int
.Fn r_core_cmd0 "RCore *core" "const char *cmd"
.Pp
Executes a command without logging.
.Sh SEEKING
.Ft bool
.Fn r_core_seek "RCore *core" "ut64 addr" "bool rb"
.Pp
Seeks to the specified address.
.Ft bool
.Fn r_core_seek_delta "RCore *core" "st64 addr"
.Pp
Seeks by a relative offset.
.Ft void
.Fn r_core_seek_previous "RCore *core" "const char *type"
.Pp
Seeks to the previous item of the specified type.
.Sh ANALYSIS
.Ft RAnalOp *
.Fn r_core_anal_op "RCore *core" "ut64 addr" "int mask"
.Pp
Analyzes an instruction at the given address.
.Ft bool
.Fn r_core_anal_fcn "RCore *core" "ut64 at" "ut64 from" "int reftype" "int depth"
.Pp
Analyzes a function starting at the given address.
.Ft void
.Fn r_core_anal_esil "RCore *core" "const char *str" "const char *addr"
.Pp
Executes ESIL code.
.Ft int
.Fn r_core_esil_step "RCore *core" "ut64 until_addr" "const char *until_expr" "ut64 *prev_addr" "bool stepOver"
.Pp
Steps through ESIL execution.
.Sh DISASSEMBLY
.Ft int
.Fn r_core_print_disasm "RCore *core" "ut64 addr" "ut8 *buf" "int len" "int count" "enum r_pdu_condition_t pdu_condition_type" "const void *pdu_condition" "bool count_bytes" "bool json" "PJ *pj" "RAnalFunction *pdf"
.Pp
Disassembles instructions at the given address.
.Ft char *
.Fn r_core_disassemble_instr "RCore *core" "ut64 addr" "int l"
.Pp
Disassembles a single instruction.
.Ft char *
.Fn r_core_disassemble_bytes "RCore *core" "ut64 addr" "int b"
.Pp
Disassembles a specified number of bytes.
.Sh BINARY OPERATIONS
.Ft bool
.Fn r_core_bin_load "RCore *core" "const char *file" "ut64 baseaddr"
.Pp
Loads a binary file for analysis.
.Ft bool
.Fn r_core_bin_info "RCore *core" "int action" "PJ *pj" "int mode" "int va" "RCoreBinFilter *filter" "const char *chksum"
.Pp
Retrieves binary information.
.Ft bool
.Fn r_core_bin_set_cur "RCore *core" "RBinFile *binfile"
.Pp
Sets the current binary file.
.Sh VISUAL MODE
.Ft void
.Fn r_core_visual "RCore *core" "const char *input"
.Pp
Enters visual mode with optional input.
.Ft int
.Fn r_core_visual_refs "RCore *core" "bool xref" "bool fcnInsteadOfAddr"
.Pp
Displays references in visual mode.
.Ft bool
.Fn r_core_visual_hud "RCore *core"
.Pp
Shows the heads-up display in visual mode.
.Sh PROJECT MANAGEMENT
.Ft bool
.Fn r_core_project_open "RCore *core" "const char *file"
.Pp
Opens a radare2 project.
.Ft bool
.Fn r_core_project_save "RCore *core" "const char *file"
.Pp
Saves the current session as a project.
.Ft int
.Fn r_core_project_list "RCore *core" "int mode"
.Pp
Lists available projects.
.Sh TASK MANAGEMENT
.Ft RCoreTask *
.Fn r_core_task_new "RCore *core" "bool create_cons" "const char *cmd" "RCoreTaskCallback cb" "void *user"
.Pp
Creates a new background task.
.Ft void
.Fn r_core_task_enqueue "RCoreTaskScheduler *scheduler" "RCoreTask *task"
.Pp
Enqueues a task for execution.
.Ft int
.Fn r_core_task_run_sync "RCoreTaskScheduler *scheduler" "RCoreTask *task"
.Pp
Runs a task synchronously.
.Sh UNDO SYSTEM
.Ft void
.Fn r_core_undo_push "RCore *core" "RCoreUndo *cu"
.Pp
Pushes an undo action.
.Ft void
.Fn r_core_undo_pop "RCore *core"
.Pp
Pops the last undo action.
.Ft void
.Fn r_core_undo_print "RCore *core" "int mode" "RCoreUndoCondition *cond"
.Pp
Prints undo history.
.Sh LOGGING
.Ft void
.Fn r_core_log_add "RCore *core" "const char *msg"
.Pp
Adds a message to the log.
.Ft void
.Fn r_core_log_view "RCore *core" "int num" "int shift"
.Pp
Views log entries.
.Ft char *
.Fn r_core_log_get "RCore *core" "int index"
.Pp
Retrieves a log entry by index.
.Sh SEARCH
.Ft int
.Fn r_core_search_cb "RCore *core" "ut64 from" "ut64 to" "RCoreSearchCallback cb"
.Pp
Performs a search with a callback.
.Ft int
.Fn r_core_search_preludes "RCore *core" "bool log"
.Pp
Searches for function preludes.
.Sh EXAMPLES
Basic core usage:
.Bd -literal
RCore *core = r_core_new();
r_core_cmd(core, "o /bin/ls", false); // open file
r_core_cmd(core, "aaa", false); // analyze all
char *disasm = r_core_cmd_str(core, "pd 10"); // disassemble 10 instructions
printf("%s\\n", disasm);
free(disasm);
r_core_free(core);
.Ed
.Pp
Seeking and analysis:
.Bd -literal
RCore *core = r_core_new();
// ... load binary ...
r_core_seek(core, 0x1000, true);
RAnalOp *op = r_core_anal_op(core, 0x1000, R_ANAL_OP_MASK_BASIC);
if (op) {
    printf("Instruction: %s\\n", op->mnemonic);
    r_anal_op_free(op);
}
r_core_free(core);
.Ed
.Pp
Project management:
.Bd -literal
RCore *core = r_core_new();
// ... perform analysis ...
r_core_project_save(core, "myproject.r2");
r_core_free(core);
// Later...
RCore *core2 = r_core_new();
r_core_project_open(core2, "myproject.r2");
// Continue where left off
r_core_free(core2);
.Ed
.Sh SEE ALSO
.Xr r_anal 3 ,
.Xr r_bin 3 ,
.Xr r_cons 3 ,
.Xr r_flag 3 ,
.Xr r_io 3
.Sh AUTHORS
The radare2 project team.